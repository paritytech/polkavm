// RO data = 1432/1432 bytes
// RW data = 8/4128 bytes
// Stack size = 40960 bytes
// Jump table entry point size = 2 bytes
// RO data = [64, 0, 255, 255, 120, 0, 255, 255, 96, 0, 255, 255, 104, 0, 255, 255, 74, 0, 255, 255, 128, 0, 255, 255, 140, 0, 255, 255, 114, 0, 255, 255, 146, 0, 255, 255, 84, 0, 255, 255, 119, 105, 95, 112, 97, 121, 108, 111, 97, 100, 95, 108, 101, 110, 103, 116, 104, 61, 110, 117, 109, 95, 112, 97, 121, 108, 111, 97, 100, 61, 110, 117, 109, 95, 99, 104, 105, 108, 100, 95, 118, 109, 61, 101, 120, 112, 111, 114, 116, 32, 105, 61, 49, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 106, 97, 109, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 50, 119, 114, 105, 116, 101, 32, 116, 111, 32, 106, 97, 109, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 53, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 106, 97, 109, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 51, 54, 102, 111, 114, 103, 101, 116, 32, 106, 97, 109, 44, 32, 101, 120, 112, 101, 99, 116, 32, 72, 85, 72, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 74, 65, 77, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 51, 119, 114, 105, 116, 101, 32, 100, 101, 108, 101, 116, 101, 100, 32, 74, 65, 77, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 51, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 74, 65, 77, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 115, 111, 108, 105, 99, 105, 116, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 113, 117, 101, 114, 121, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 113, 117, 101, 114, 121, 32, 104, 97, 115, 104, 40, 100, 111, 116, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 102, 111, 114, 103, 101, 116, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 105, 110, 115, 101, 114, 116, 32, 116, 113, 117, 101, 114, 121, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 50, 43, 50, 94, 51, 50, 42, 120, 108, 111, 111, 107, 117, 112, 32, 104, 97, 115, 104, 40, 100, 111, 116, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 97, 115, 115, 105, 103, 110, 32, 106, 97, 109, 44, 32, 101, 120, 112, 101, 99, 116, 32, 67, 79, 82, 69, 108, 111, 111, 107, 117, 112, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 51, 101, 106, 101, 99, 116, 44, 32, 101, 120, 112, 101, 99, 116, 32, 87, 72, 79, 98, 108, 101, 115, 115, 44, 32, 101, 120, 112, 101, 99, 116, 32, 87, 72, 79, 115, 111, 108, 105, 99, 105, 116, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 105, 110, 115, 101, 114, 116, 32, 116, 113, 117, 101, 114, 121, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 51, 43, 50, 94, 51, 50, 42, 120, 97, 115, 115, 105, 103, 110, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 102, 111, 114, 103, 101, 116, 32, 104, 97, 115, 104, 40, 106, 97, 109, 41, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 110, 101, 119, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 115, 101, 114, 118, 105, 99, 101, 95, 105, 110, 100, 101, 120, 117, 112, 103, 114, 97, 100, 101, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 121, 105, 101, 108, 100, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 98, 108, 101, 115, 115, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 119, 114, 105, 116, 101, 32, 100, 101, 108, 101, 116, 101, 100, 32, 68, 79, 84, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 119, 114, 105, 116, 101, 32, 116, 111, 32, 68, 79, 84, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 119, 114, 105, 116, 101, 32, 100, 101, 108, 101, 116, 101, 100, 32, 68, 79, 84, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 51, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 68, 79, 84, 44, 32, 101, 120, 112, 101, 99, 116, 32, 78, 79, 78, 69, 55, 56, 105, 110, 102, 111, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 57, 103, 97, 115, 44, 32, 101, 120, 112, 101, 99, 116, 32, 79, 75, 58, 32, 103, 97, 115, 99, 111, 114, 101, 118, 109, 32, 99, 104, 101, 99, 107, 112, 111, 105, 110, 116, 91, 105, 110, 102, 111, 114, 101, 97, 100, 112, 101, 101, 107, 122, 101, 114, 111, 32, 32, 32, 32, 112, 111, 107, 101, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 115, 101, 116, 117, 112, 95, 112, 97, 103, 101, 58, 32, 112, 111, 107, 101, 32, 102, 97, 105, 108, 101, 100, 115, 101, 116, 117, 112, 95, 112, 97, 103, 101, 58, 32, 122, 101, 114, 111, 32, 102, 97, 105, 108, 101, 100, 103, 101, 116, 95, 112, 97, 103, 101, 58, 32, 112, 101, 101, 107, 32, 102, 97, 105, 108, 101, 100, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 40, 0, 1, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 58, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 70, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 83, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 188, 4, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 205, 4, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [0, 0, 0, 0, 0, 0, 0, 0]
// Instructions = 3633
// Code size = 11158 bytes

      :                          @0
     0: 28 b7 00 00 00           jump @14
      :                          @1
     5: 28 6f 0f 00 00           jump @233
      :                          @2
    10: 28 a1 19                 jump @360
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 80 89 1c                 a2 = u32 [a1 + 0x1c]
    24: 84 9a 10                 a3 = a2 & 0x10
    27: 52 0a 16                 jump @6 if a3 != 0
      :                          @4
    30: 82 77                    a0 = u64 [a0]
    32: 84 99 20                 a2 = a2 & 0x20
    35: 52 09 46                 jump @9 if a2 != 0
      :                          @5
    38: 82 10 80 00              ra = u64 [sp + 0x80]
    42: 95 11 88 00              sp = sp + 0x88
    46: 28 2c 25                 jump @606
      :                          @6
    49: 82 7b                    a4 = u64 [a0]
    51: 33 0a 7f                 a3 = 0x7f
    54: 64 12                    t0 = sp
    56: 01                       fallthrough
      :                          @7
    57: 64 a9                    a2 = a3
    59: 98 bc 04                 a5 = a4 >> 0x4
    62: c8 a2 03                 t1 = t0 + a3
    65: 84 bb 0f                 a4 = a4 & 0xf
    68: 88 b7 0a                 a0 = a4 <u 0xa
    71: 86 ba 30                 a3 = a4 | 0x30
    74: 95 bb 57                 a4 = a4 + 0x57
    77: db 7a 0b                 a4 = a3 if a0 != 0
    80: 78 3b                    u8 [t1] = a4
    82: 95 9a ff                 a3 = a2 + 0xffffffffffffffff
    85: 64 cb                    a4 = a5
    87: 52 0c e2                 jump @7 if a5 != 0
      :                          @8
    90: 95 99 01                 a2 = a2 + 0x1
    93: c8 2a 0a                 a3 = a3 + t0
    96: 95 aa 01                 a3 = a3 + 0x1
    99: 9a 9b 81 00              a4 = 0x81 - a2
   103: 28 37                    jump @12
      :                          @9
   105: 33 0b 7f                 a4 = 0x7f
   108: 64 12                    t0 = sp
   110: 01                       fallthrough
      :                          @10
   111: 64 ba                    a3 = a4
   113: 98 7c 04                 a5 = a0 >> 0x4
   116: c8 b2 03                 t1 = t0 + a4
   119: 84 77 0f                 a0 = a0 & 0xf
   122: 88 79 0a                 a2 = a0 <u 0xa
   125: 86 7b 30                 a4 = a0 | 0x30
   128: 95 77 37                 a0 = a0 + 0x37
   131: db 9b 07                 a0 = a4 if a2 != 0
   134: 78 37                    u8 [t1] = a0
   136: 95 ab ff                 a4 = a3 + 0xffffffffffffffff
   139: 64 c7                    a0 = a5
   141: 52 0c e2                 jump @10 if a5 != 0
      :                          @11
   144: 95 a7 01                 a0 = a3 + 0x1
   147: c8 b2 0a                 a3 = t0 + a4
   150: 95 aa 01                 a3 = a3 + 0x1
   153: 9a 7b 81 00              a4 = 0x81 - a0
   157: 01                       fallthrough
      :                          @12
   158: 33 09 02                 a2 = 0x2
   161: 64 87                    a0 = a1
   163: 33 08 af 03 01           a1 = 0x103af
   168: 50 10 04 3c 1d           ra = 4, jump @462
      :                          @13 [@dyn 2]
   173: 82 10 80 00              ra = u64 [sp + 0x80]
   177: 95 11 88 00              sp = sp + 0x88
   181: 32 00                    ret
      :                          @14 [export #0: 'refine']
   183: 95 11 10 fe              sp = sp + 0xfffffffffffffe10
   187: 7b 10 e8 01              u64 [sp + 0x1e8] = ra
   191: 7b 15 e0 01              u64 [sp + 0x1e0] = s0
   195: 7b 16 d8 01              u64 [sp + 0x1d8] = s1
   199: 95 11 30 ad              sp = sp + 0xffffffffffffad30
   203: 33 0a 04                 a3 = 0x4
   206: 33 09 00 00 01           a2 = 0x10000
   211: ac a8 16                 jump @18 if a1 <u a3
      :                          @15
   214: 95 86 fc                 s1 = a1 + 0xfffffffffffffffc
   217: 51 06 10                 jump @18 if s1 == 0
      :                          @16
   220: 95 7a 04                 a3 = a0 + 0x4
   223: 7d a8                    a1 = i8 [a3]
   225: 57 08 26                 jump @20 if a1 <s 0
      :                          @17
   228: 33 05 01                 s0 = 0x1
   231: 28 5e                    jump @31
      :                          @18
   233: 33 08                    a1 = 0
   235: 01                       fallthrough
      :                          @19
   236: 64 97                    a0 = a2
   238: 33 09 d0 52              a2 = 0x52d0
   242: c8 91 01                 sp = sp + a2
   245: 82 10 e8 01              ra = u64 [sp + 0x1e8]
   249: 82 15 e0 01              s0 = u64 [sp + 0x1e0]
   253: 82 16 d8 01              s1 = u64 [sp + 0x1d8]
   257: 95 11 f0 01              sp = sp + 0x1f0
   261: 32 00                    ret
      :                          @20
   263: 84 88 ff 00              a1 = a1 & 0xff
   267: 55 28 c0 00 0a           jump @22 if a1 >=u 192
      :                          @21
   272: 33 05 02                 s0 = 0x2
   275: 28 32                    jump @31
      :                          @22
   277: 55 28 e0 00 0a           jump @24 if a1 >=u 224
      :                          @23
   282: 33 05 03                 s0 = 0x3
   285: 28 28                    jump @31
      :                          @24
   287: 55 28 f0 00 0a           jump @26 if a1 >=u 240
      :                          @25
   292: 33 05 04                 s0 = 0x4
   295: 28 1e                    jump @31
      :                          @26
   297: 55 28 f8 00 0a           jump @28 if a1 >=u 248
      :                          @27
   302: 33 05 05                 s0 = 0x5
   305: 28 14                    jump @31
      :                          @28
   307: 55 28 fc 00 0a           jump @30 if a1 >=u 252
      :                          @29
   312: 33 05 06                 s0 = 0x6
   315: 28 0a                    jump @31
      :                          @30
   317: 88 88 fe 00              a1 = a1 <u 0xfe
   321: 9a 85 08                 s0 = 0x8 - a1
   324: 01                       fallthrough
      :                          @31
   325: ac 56 2c 05              jump @92 if s1 <u s0
      :                          @32
   329: 80 77                    a0 = u32 [a0]
   331: 7b 17 f8 00              u64 [sp + 0xf8] = a0
   335: 7b 1a b8 00              u64 [sp + 0xb8] = a3
   339: 64 a7                    a0 = a3
   341: 64 58                    a1 = s0
   343: 50 10 06 21 25           ra = 6, jump @618
      :                          @33 [@dyn 3]
   348: 7b 15 b0 00              u64 [sp + 0xb0] = s0
   352: c9 56 09                 a2 = s1 - s0
   355: 33 08                    a1 = 0
   357: ac 79 aa 02              jump @68 if a2 <u a0
      :                          @34
   361: c9 79 0a                 a3 = a2 - a0
   364: 33 0b 20                 a4 = 0x20
   367: 33 09 00 00 01           a2 = 0x10000
   372: ac ba 78 ff              jump @19 if a3 <u a4
      :                          @35
   376: 33 08                    a1 = 0
   378: 33 0b                    a4 = 0
   380: 33 0c                    a5 = 0
   382: 7b 17 00 01              u64 [sp + 0x100] = a0
   386: 48 21 28 01              u32 [sp + 296] = 0
   390: 49 21 08 01              u64 [sp + 264] = 0
   394: 49 21 10 01              u64 [sp + 272] = 0
   398: 49 21 18 01              u64 [sp + 280] = 0
   402: 49 21 20 01              u64 [sp + 288] = 0
   406: 95 17 08 01              a0 = sp + 0x108
   410: 33 09 24                 a2 = 0x24
   413: 33 0a 03                 a3 = 0x3
   416: 0a 12                    ecalli 18 // 'fetch'
   418: 01                       fallthrough
      :                          @36
   419: 82 17 00 01              a0 = u64 [sp + 0x100]
   423: 95 19 08 01              a2 = sp + 0x108
   427: 33 0a 08                 a3 = 0x8
   430: 33 08 24                 a1 = 0x24
   433: ac a7 3b ff              jump @19 if a0 <u a3
      :                          @37
   437: 95 17 30 01              a0 = sp + 0x130
   441: 33 09 00 02              a2 = 0x200
   445: 33 08                    a1 = 0
   447: 50 10 08 6d 29           ra = 8, jump @704
      :                          @38 [@dyn 4]
   452: 95 18 08 01              a1 = sp + 0x108
   456: 95 19 30 01              a2 = sp + 0x130
   460: 33 0b 00 02              a4 = 0x200
   464: 82 17 f8 00              a0 = u64 [sp + 0xf8]
   468: 33 0a                    a3 = 0
   470: 0a 11                    ecalli 17 // 'historical_lookup'
   472: 01                       fallthrough
      :                          @39
   473: 51 17 ff 3e 02           jump @69 if a0 == 4294967295
      :                          @40
   478: 7b 17 f8 00              u64 [sp + 0xf8] = a0
   482: 95 1a f0 43              a3 = sp + 0x43f0
   486: 95 1b e0 33              a4 = sp + 0x33e0
   490: 82 17 00 01              a0 = u64 [sp + 0x100]
   494: 49 21 58 03              u64 [sp + 856] = 0
   498: 49 21 60 03              u64 [sp + 864] = 0
   502: 49 21 68 03              u64 [sp + 872] = 0
   506: 49 21 70 03              u64 [sp + 880] = 0
   510: 49 21 38 03              u64 [sp + 824] = 0
   514: 49 21 40 03              u64 [sp + 832] = 0
   518: 49 21 48 03              u64 [sp + 840] = 0
   522: 49 21 50 03              u64 [sp + 848] = 0
   526: 95 18 00 01              a1 = sp + 0x100
   530: 33 0c 02                 a5 = 0x2
   533: 33 09 d8 04 01           a2 = 0x104d8
   538: 33 06 01                 s1 = 0x1
   541: 33 03 e0 33              t1 = 0x33e0
   545: c8 31 05                 s0 = sp + t1
   548: 98 77 03                 a0 = a0 >> 0x3
   551: 7b 17 30 03              u64 [sp + 0x330] = a0
   555: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   558: 7b 17 78 03              u64 [sp + 0x378] = a0
   562: 33 02 ff ef              t0 = 0xffffffffffffefff
   566: 7b 12 e0 00              u64 [sp + 0xe0] = t0
   570: 7b b8                    u64 [a4] = a1
   572: 7b 1c d8 00              u64 [sp + 0xd8] = a5
   576: 7b bc 08                 u64 [a4 + 0x8] = a5
   579: 49 2a d0 00              u64 [a3 + 208] = 0
   583: 7b a9 b0 00              u64 [a3 + 0xb0] = a2
   587: 7b a6 b8 00              u64 [a3 + 0xb8] = s1
   591: 7b a5 c0 00              u64 [a3 + 0xc0] = s0
   595: 7b a6 c8 00              u64 [a3 + 0xc8] = s1
   599: 95 17 80 03              a0 = sp + 0x380
   603: 95 18 a0 44              a1 = sp + 0x44a0
   607: 50 10 0a 24 19           ra = 10, jump @409
      :                          @41 [@dyn 5]
   612: 33 08                    a1 = 0
   614: 33 09                    a2 = 0
   616: 82 15 88 03              s0 = u64 [sp + 0x388]
   620: 82 1b 90 03              a4 = u64 [sp + 0x390]
   624: 82 16 80 03              s1 = u64 [sp + 0x380]
   628: 33 07 02                 a0 = 0x2
   631: 64 5a                    a3 = s0
   633: 33 00 0c                 ra = 0xc
   636: 0a 64                    ecalli 100 // 'log'
   638: 01                       fallthrough
      :                          @42 [@dyn 6]
   639: 82 17 e0 00              a0 = u64 [sp + 0xe0]
   643: c8 67 07                 a0 = a0 + s1
   646: 33 0c 10 00 03           a5 = 0x30010
   651: 53 27 00 f0 1e           jump @48 if a0 <u 4294963200
      :                          @43
   656: 95 c7 00 10              a0 = a5 + 0x1000
   660: 01                       fallthrough
      :                          @44
   661: 82 78                    a1 = u64 [a0]
   663: c9 87 09                 a2 = a0 - a1
   666: ab 59 0f                 jump @48 if a2 != s0
      :                          @45
   669: c9 68 09                 a2 = a1 - s1
   672: 01                       fallthrough
      :                          @46
   673: 82 7a                    a3 = u64 [a0]
   675: ab 8a f2                 jump @44 if a3 != a1
      :                          @47
   678: 7b 79                    u64 [a0] = a2
   680: 01                       fallthrough
      :                          @48
   681: 7b 1c d0 00              u64 [sp + 0xd0] = a5
   685: 95 17 30 03              a0 = sp + 0x330
   689: 33 08 e8 04 01           a1 = 0x104e8
   694: 95 19 f0 43              a2 = sp + 0x43f0
   698: 49 29 d0 00              u64 [a2 + 208] = 0
   702: 95 1a e0 33              a3 = sp + 0x33e0
   706: 7b a7                    u64 [a3] = a0
   708: 82 17 d8 00              a0 = u64 [sp + 0xd8]
   712: 7b a7 08                 u64 [a3 + 0x8] = a0
   715: 7b 98 b0 00              u64 [a2 + 0xb0] = a1
   719: 49 29 b8 00 01           u64 [a2 + 184] = 0x1
   724: 95 18 e0 33              a1 = sp + 0x33e0
   728: 7b 98 c0 00              u64 [a2 + 0xc0] = a1
   732: 49 29 c8 00 01           u64 [a2 + 200] = 0x1
   737: 95 17 98 03              a0 = sp + 0x398
   741: 95 18 a0 44              a1 = sp + 0x44a0
   745: 50 10 0e 9a 18           ra = 14, jump @409
      :                          @49 [@dyn 7]
   750: 82 15 a0 03              s0 = u64 [sp + 0x3a0]
   754: 82 1b a8 03              a4 = u64 [sp + 0x3a8]
   758: 82 16 98 03              s1 = u64 [sp + 0x398]
   762: 33 07 02                 a0 = 0x2
   765: 33 08                    a1 = 0
   767: 33 09                    a2 = 0
   769: 64 5a                    a3 = s0
   771: 33 00 10                 ra = 0x10
   774: 0a 64                    ecalli 100 // 'log'
   776: 01                       fallthrough
      :                          @50 [@dyn 8]
   777: 82 17 e0 00              a0 = u64 [sp + 0xe0]
   781: c8 67 07                 a0 = a0 + s1
   784: 53 27 00 f0 22           jump @56 if a0 <u 4294963200
      :                          @51
   789: 82 18 d0 00              a1 = u64 [sp + 0xd0]
   793: 95 87 00 10              a0 = a1 + 0x1000
   797: 01                       fallthrough
      :                          @52
   798: 82 78                    a1 = u64 [a0]
   800: c9 87 09                 a2 = a0 - a1
   803: ab 59 0f                 jump @56 if a2 != s0
      :                          @53
   806: c9 68 09                 a2 = a1 - s1
   809: 01                       fallthrough
      :                          @54
   810: 82 7a                    a3 = u64 [a0]
   812: ab 8a f2                 jump @52 if a3 != a1
      :                          @55
   815: 7b 79                    u64 [a0] = a2
   817: 01                       fallthrough
      :                          @56
   818: 95 17 78 03              a0 = sp + 0x378
   822: 33 0c f8 04 01           a5 = 0x104f8
   827: 95 1a f0 43              a3 = sp + 0x43f0
   831: 49 2a d0 00              u64 [a3 + 208] = 0
   835: 95 19 e0 33              a2 = sp + 0x33e0
   839: 95 1b e0 33              a4 = sp + 0x33e0
   843: 7b b7                    u64 [a4] = a0
   845: 82 17 d8 00              a0 = u64 [sp + 0xd8]
   849: 7b b7 08                 u64 [a4 + 0x8] = a0
   852: 7b 1c a8 00              u64 [sp + 0xa8] = a5
   856: 7b ac b0 00              u64 [a3 + 0xb0] = a5
   860: 49 2a b8 00 01           u64 [a3 + 184] = 0x1
   865: 7b a9 c0 00              u64 [a3 + 0xc0] = a2
   869: 49 2a c8 00 01           u64 [a3 + 200] = 0x1
   874: 95 17 b0 03              a0 = sp + 0x3b0
   878: 95 18 a0 44              a1 = sp + 0x44a0
   882: 50 10 12 11 18           ra = 18, jump @409
      :                          @57 [@dyn 9]
   887: 33 08                    a1 = 0
   889: 33 09                    a2 = 0
   891: 82 15 b8 03              s0 = u64 [sp + 0x3b8]
   895: 82 1b c0 03              a4 = u64 [sp + 0x3c0]
   899: 82 16 b0 03              s1 = u64 [sp + 0x3b0]
   903: 33 07 02                 a0 = 0x2
   906: 64 5a                    a3 = s0
   908: 33 00 14                 ra = 0x14
   911: 0a 64                    ecalli 100 // 'log'
   913: 01                       fallthrough
      :                          @58 [@dyn 10]
   914: 82 17 e0 00              a0 = u64 [sp + 0xe0]
   918: c8 67 07                 a0 = a0 + s1
   921: 53 27 00 f0 22           jump @64 if a0 <u 4294963200
      :                          @59
   926: 82 18 d0 00              a1 = u64 [sp + 0xd0]
   930: 95 87 00 10              a0 = a1 + 0x1000
   934: 01                       fallthrough
      :                          @60
   935: 82 78                    a1 = u64 [a0]
   937: c9 87 09                 a2 = a0 - a1
   940: ab 59 0f                 jump @64 if a2 != s0
      :                          @61
   943: c9 68 09                 a2 = a1 - s1
   946: 01                       fallthrough
      :                          @62
   947: 82 7a                    a3 = u64 [a0]
   949: ab 8a f2                 jump @60 if a3 != a1
      :                          @63
   952: 7b 79                    u64 [a0] = a2
   954: 01                       fallthrough
      :                          @64
   955: 82 15 78 03              s0 = u64 [sp + 0x378]
   959: 82 17 00 01              a0 = u64 [sp + 0x100]
   963: 7b 17 c8 00              u64 [sp + 0xc8] = a0
   967: 51 05 5a                 jump @70 if s0 == 0
      :                          @65
   970: 82 18 f8 00              a1 = u64 [sp + 0xf8]
   974: 33 09                    a2 = 0
   976: 95 55 01                 s0 = s0 + 0x1
   979: 95 17 30 01              a0 = sp + 0x130
   983: 0a 14                    ecalli 20 // 'machine'
   985: 01                       fallthrough
      :                          @66
   986: 7a 17 38 03              u32 [sp + 0x338] = a0
   990: 52 15 02 77              jump @71 if s0 != 2
      :                          @67
   994: 49 21 c0 00              u64 [sp + 192] = 0
   998: 49 21 e8 00              u64 [sp + 232] = 0
  1002: 49 21 f0 00              u64 [sp + 240] = 0
  1006: 49 21 90 00              u64 [sp + 144] = 0
  1010: 49 21 98 00              u64 [sp + 152] = 0
  1014: 49 21 a0 00              u64 [sp + 160] = 0
  1018: 33 02                    t0 = 0
  1020: 33 03                    t1 = 0
  1022: 33 04                    t2 = 0
  1024: 33 0c                    a5 = 0
  1026: 33 00                    ra = 0
  1028: 33 0b                    a4 = 0
  1030: 33 0a                    a3 = 0
  1032: 33 09                    a2 = 0
  1034: 33 08                    a1 = 0
  1036: 28 e5 03                 jump @115
      :                          @68
  1039: 33 09 00 00 01           a2 = 0x10000
  1044: 28 d8 fc                 jump @19
      :                          @69
  1047: 33 08                    a1 = 0
  1049: 33 09 00 00 01           a2 = 0x10000
  1054: 28 ce fc                 jump @19
      :                          @70
  1057: 49 11 08                 u64 [sp + 8] = 0
  1060: 49 11 10                 u64 [sp + 16] = 0
  1063: 49 11 18                 u64 [sp + 24] = 0
  1066: 49 11 20                 u64 [sp + 32] = 0
  1069: 49 11 28                 u64 [sp + 40] = 0
  1072: 49 11 30                 u64 [sp + 48] = 0
  1075: 49 11 38                 u64 [sp + 56] = 0
  1078: 49 11 40                 u64 [sp + 64] = 0
  1081: 49 11 48                 u64 [sp + 72] = 0
  1084: 49 11 50                 u64 [sp + 80] = 0
  1087: 49 11 58                 u64 [sp + 88] = 0
  1090: 49 11 68                 u64 [sp + 104] = 0
  1093: 49 11 70                 u64 [sp + 112] = 0
  1096: 49 11 78                 u64 [sp + 120] = 0
  1099: 49 11 60                 u64 [sp + 96] = 0
  1102: 49 21 80 00              u64 [sp + 128] = 0
  1106: 28 6b 04                 jump @116
      :                          @71
  1109: 7b 17 88 00              u64 [sp + 0x88] = a0
  1113: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1117: 33 09                    a2 = 0
  1119: 95 17 30 01              a0 = sp + 0x130
  1123: 0a 14                    ecalli 20 // 'machine'
  1125: 01                       fallthrough
      :                          @72
  1126: 64 78                    a1 = a0
  1128: 7a 17 3c 03              u32 [sp + 0x33c] = a0
  1132: 52 15 03 33              jump @74 if s0 != 3
      :                          @73
  1136: 49 21 c0 00              u64 [sp + 192] = 0
  1140: 49 21 e8 00              u64 [sp + 232] = 0
  1144: 49 21 f0 00              u64 [sp + 240] = 0
  1148: 49 21 90 00              u64 [sp + 144] = 0
  1152: 49 21 98 00              u64 [sp + 152] = 0
  1156: 49 21 a0 00              u64 [sp + 160] = 0
  1160: 33 02                    t0 = 0
  1162: 33 03                    t1 = 0
  1164: 33 04                    t2 = 0
  1166: 33 0c                    a5 = 0
  1168: 33 00                    ra = 0
  1170: 33 0b                    a4 = 0
  1172: 33 0a                    a3 = 0
  1174: 33 09                    a2 = 0
  1176: 82 17 88 00              a0 = u64 [sp + 0x88]
  1180: 28 55 03                 jump @115
      :                          @74
  1183: 7b 18 80 00              u64 [sp + 0x80] = a1
  1187: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1191: 33 09                    a2 = 0
  1193: 95 17 30 01              a0 = sp + 0x130
  1197: 0a 14                    ecalli 20 // 'machine'
  1199: 01                       fallthrough
      :                          @75
  1200: 64 79                    a2 = a0
  1202: 7a 17 40 03              u32 [sp + 0x340] = a0
  1206: 52 15 04 35              jump @77 if s0 != 4
      :                          @76
  1210: 49 21 c0 00              u64 [sp + 192] = 0
  1214: 49 21 e8 00              u64 [sp + 232] = 0
  1218: 49 21 f0 00              u64 [sp + 240] = 0
  1222: 49 21 90 00              u64 [sp + 144] = 0
  1226: 49 21 98 00              u64 [sp + 152] = 0
  1230: 49 21 a0 00              u64 [sp + 160] = 0
  1234: 33 02                    t0 = 0
  1236: 33 03                    t1 = 0
  1238: 33 04                    t2 = 0
  1240: 33 0c                    a5 = 0
  1242: 33 00                    ra = 0
  1244: 33 0b                    a4 = 0
  1246: 33 0a                    a3 = 0
  1248: 82 17 88 00              a0 = u64 [sp + 0x88]
  1252: 82 18 80 00              a1 = u64 [sp + 0x80]
  1256: 28 09 03                 jump @115
      :                          @77
  1259: 7b 19 78                 u64 [sp + 0x78] = a2
  1262: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1266: 33 09                    a2 = 0
  1268: 95 17 30 01              a0 = sp + 0x130
  1272: 0a 14                    ecalli 20 // 'machine'
  1274: 01                       fallthrough
      :                          @78
  1275: 64 7a                    a3 = a0
  1277: 7a 17 44 03              u32 [sp + 0x344] = a0
  1281: 52 15 05 36              jump @80 if s0 != 5
      :                          @79
  1285: 49 21 c0 00              u64 [sp + 192] = 0
  1289: 49 21 e8 00              u64 [sp + 232] = 0
  1293: 49 21 f0 00              u64 [sp + 240] = 0
  1297: 49 21 90 00              u64 [sp + 144] = 0
  1301: 49 21 98 00              u64 [sp + 152] = 0
  1305: 49 21 a0 00              u64 [sp + 160] = 0
  1309: 33 02                    t0 = 0
  1311: 33 03                    t1 = 0
  1313: 33 04                    t2 = 0
  1315: 33 0c                    a5 = 0
  1317: 33 00                    ra = 0
  1319: 33 0b                    a4 = 0
  1321: 82 17 88 00              a0 = u64 [sp + 0x88]
  1325: 82 18 80 00              a1 = u64 [sp + 0x80]
  1329: 82 19 78                 a2 = u64 [sp + 0x78]
  1332: 28 bd 02                 jump @115
      :                          @80
  1335: 7b 1a 70                 u64 [sp + 0x70] = a3
  1338: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1342: 33 09                    a2 = 0
  1344: 95 17 30 01              a0 = sp + 0x130
  1348: 0a 14                    ecalli 20 // 'machine'
  1350: 01                       fallthrough
      :                          @81
  1351: 64 7b                    a4 = a0
  1353: 7a 17 48 03              u32 [sp + 0x348] = a0
  1357: 52 15 06 37              jump @83 if s0 != 6
      :                          @82
  1361: 49 21 c0 00              u64 [sp + 192] = 0
  1365: 49 21 e8 00              u64 [sp + 232] = 0
  1369: 49 21 f0 00              u64 [sp + 240] = 0
  1373: 49 21 90 00              u64 [sp + 144] = 0
  1377: 49 21 98 00              u64 [sp + 152] = 0
  1381: 49 21 a0 00              u64 [sp + 160] = 0
  1385: 33 02                    t0 = 0
  1387: 33 03                    t1 = 0
  1389: 33 04                    t2 = 0
  1391: 33 0c                    a5 = 0
  1393: 33 00                    ra = 0
  1395: 82 17 88 00              a0 = u64 [sp + 0x88]
  1399: 82 18 80 00              a1 = u64 [sp + 0x80]
  1403: 82 19 78                 a2 = u64 [sp + 0x78]
  1406: 82 1a 70                 a3 = u64 [sp + 0x70]
  1409: 28 70 02                 jump @115
      :                          @83
  1412: 7b 1b 68                 u64 [sp + 0x68] = a4
  1415: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1419: 33 09                    a2 = 0
  1421: 95 17 30 01              a0 = sp + 0x130
  1425: 0a 14                    ecalli 20 // 'machine'
  1427: 01                       fallthrough
      :                          @84
  1428: 64 70                    ra = a0
  1430: 7a 17 4c 03              u32 [sp + 0x34c] = a0
  1434: 52 15 07 38              jump @86 if s0 != 7
      :                          @85
  1438: 49 21 c0 00              u64 [sp + 192] = 0
  1442: 49 21 e8 00              u64 [sp + 232] = 0
  1446: 49 21 f0 00              u64 [sp + 240] = 0
  1450: 49 21 90 00              u64 [sp + 144] = 0
  1454: 49 21 98 00              u64 [sp + 152] = 0
  1458: 49 21 a0 00              u64 [sp + 160] = 0
  1462: 33 02                    t0 = 0
  1464: 33 03                    t1 = 0
  1466: 33 04                    t2 = 0
  1468: 33 0c                    a5 = 0
  1470: 82 17 88 00              a0 = u64 [sp + 0x88]
  1474: 82 18 80 00              a1 = u64 [sp + 0x80]
  1478: 82 19 78                 a2 = u64 [sp + 0x78]
  1481: 82 1a 70                 a3 = u64 [sp + 0x70]
  1484: 82 1b 68                 a4 = u64 [sp + 0x68]
  1487: 28 22 02                 jump @115
      :                          @86
  1490: 7b 10 60                 u64 [sp + 0x60] = ra
  1493: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1497: 33 09                    a2 = 0
  1499: 95 17 30 01              a0 = sp + 0x130
  1503: 0a 14                    ecalli 20 // 'machine'
  1505: 01                       fallthrough
      :                          @87
  1506: 64 7c                    a5 = a0
  1508: 7a 17 50 03              u32 [sp + 0x350] = a0
  1512: 52 15 08 39              jump @89 if s0 != 8
      :                          @88
  1516: 49 21 c0 00              u64 [sp + 192] = 0
  1520: 49 21 e8 00              u64 [sp + 232] = 0
  1524: 49 21 f0 00              u64 [sp + 240] = 0
  1528: 49 21 90 00              u64 [sp + 144] = 0
  1532: 49 21 98 00              u64 [sp + 152] = 0
  1536: 49 21 a0 00              u64 [sp + 160] = 0
  1540: 33 02                    t0 = 0
  1542: 33 03                    t1 = 0
  1544: 33 04                    t2 = 0
  1546: 82 17 88 00              a0 = u64 [sp + 0x88]
  1550: 82 18 80 00              a1 = u64 [sp + 0x80]
  1554: 82 19 78                 a2 = u64 [sp + 0x78]
  1557: 82 1a 70                 a3 = u64 [sp + 0x70]
  1560: 82 1b 68                 a4 = u64 [sp + 0x68]
  1563: 82 10 60                 ra = u64 [sp + 0x60]
  1566: 28 d3 01                 jump @115
      :                          @89
  1569: 7b 1c 58                 u64 [sp + 0x58] = a5
  1572: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1576: 33 09                    a2 = 0
  1578: 95 17 30 01              a0 = sp + 0x130
  1582: 0a 14                    ecalli 20 // 'machine'
  1584: 01                       fallthrough
      :                          @90
  1585: 64 74                    t2 = a0
  1587: 7a 17 54 03              u32 [sp + 0x354] = a0
  1591: 52 15 09 3b              jump @93 if s0 != 9
      :                          @91
  1595: 49 21 c0 00              u64 [sp + 192] = 0
  1599: 49 21 e8 00              u64 [sp + 232] = 0
  1603: 49 21 f0 00              u64 [sp + 240] = 0
  1607: 49 21 90 00              u64 [sp + 144] = 0
  1611: 49 21 98 00              u64 [sp + 152] = 0
  1615: 49 21 a0 00              u64 [sp + 160] = 0
  1619: 33 02                    t0 = 0
  1621: 33 03                    t1 = 0
  1623: 82 17 88 00              a0 = u64 [sp + 0x88]
  1627: 82 18 80 00              a1 = u64 [sp + 0x80]
  1631: 82 19 78                 a2 = u64 [sp + 0x78]
  1634: 82 1a 70                 a3 = u64 [sp + 0x70]
  1637: 82 1b 68                 a4 = u64 [sp + 0x68]
  1640: 82 10 60                 ra = u64 [sp + 0x60]
  1643: 82 1c 58                 a5 = u64 [sp + 0x58]
  1646: 28 83 01                 jump @115
      :                          @92
  1649: 00                       trap
      :                          @93
  1650: 7b 14 50                 u64 [sp + 0x50] = t2
  1653: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1657: 33 09                    a2 = 0
  1659: 95 17 30 01              a0 = sp + 0x130
  1663: 0a 14                    ecalli 20 // 'machine'
  1665: 01                       fallthrough
      :                          @94
  1666: 7b 17 48                 u64 [sp + 0x48] = a0
  1669: 7a 17 58 03              u32 [sp + 0x358] = a0
  1673: 52 15 0a 3e              jump @96 if s0 != 10
      :                          @95
  1677: 49 21 c0 00              u64 [sp + 192] = 0
  1681: 49 21 e8 00              u64 [sp + 232] = 0
  1685: 49 21 f0 00              u64 [sp + 240] = 0
  1689: 49 21 90 00              u64 [sp + 144] = 0
  1693: 49 21 98 00              u64 [sp + 152] = 0
  1697: 49 21 a0 00              u64 [sp + 160] = 0
  1701: 33 02                    t0 = 0
  1703: 82 17 88 00              a0 = u64 [sp + 0x88]
  1707: 82 18 80 00              a1 = u64 [sp + 0x80]
  1711: 82 19 78                 a2 = u64 [sp + 0x78]
  1714: 82 1a 70                 a3 = u64 [sp + 0x70]
  1717: 82 1b 68                 a4 = u64 [sp + 0x68]
  1720: 82 10 60                 ra = u64 [sp + 0x60]
  1723: 82 1c 58                 a5 = u64 [sp + 0x58]
  1726: 82 14 50                 t2 = u64 [sp + 0x50]
  1729: 82 13 48                 t1 = u64 [sp + 0x48]
  1732: 28 2d 01                 jump @115
      :                          @96
  1735: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1739: 33 09                    a2 = 0
  1741: 95 17 30 01              a0 = sp + 0x130
  1745: 0a 14                    ecalli 20 // 'machine'
  1747: 01                       fallthrough
      :                          @97
  1748: 7b 17 40                 u64 [sp + 0x40] = a0
  1751: 7a 17 5c 03              u32 [sp + 0x35c] = a0
  1755: 7b 15 38                 u64 [sp + 0x38] = s0
  1758: 52 15 0b 1f              jump @99 if s0 != 11
      :                          @98
  1762: 49 21 c0 00              u64 [sp + 192] = 0
  1766: 49 21 e8 00              u64 [sp + 232] = 0
  1770: 49 21 f0 00              u64 [sp + 240] = 0
  1774: 49 21 90 00              u64 [sp + 144] = 0
  1778: 49 21 98 00              u64 [sp + 152] = 0
  1782: 49 21 a0 00              u64 [sp + 160] = 0
  1786: 28 d6 00                 jump @114
      :                          @99
  1789: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1793: 33 09                    a2 = 0
  1795: 95 17 30 01              a0 = sp + 0x130
  1799: 0a 14                    ecalli 20 // 'machine'
  1801: 01                       fallthrough
      :                          @100
  1802: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1806: 7a 17 60 03              u32 [sp + 0x360] = a0
  1810: 82 17 38                 a0 = u64 [sp + 0x38]
  1813: 52 17 0c 1b              jump @102 if a0 != 12
      :                          @101
  1817: 49 21 c0 00              u64 [sp + 192] = 0
  1821: 49 21 e8 00              u64 [sp + 232] = 0
  1825: 49 21 f0 00              u64 [sp + 240] = 0
  1829: 49 21 90 00              u64 [sp + 144] = 0
  1833: 49 21 98 00              u64 [sp + 152] = 0
  1837: 28 a3 00                 jump @114
      :                          @102
  1840: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1844: 33 09                    a2 = 0
  1846: 95 17 30 01              a0 = sp + 0x130
  1850: 0a 14                    ecalli 20 // 'machine'
  1852: 01                       fallthrough
      :                          @103
  1853: 7b 17 98 00              u64 [sp + 0x98] = a0
  1857: 7a 17 64 03              u32 [sp + 0x364] = a0
  1861: 82 17 38                 a0 = u64 [sp + 0x38]
  1864: 52 17 0d 16              jump @105 if a0 != 13
      :                          @104
  1868: 49 21 c0 00              u64 [sp + 192] = 0
  1872: 49 21 e8 00              u64 [sp + 232] = 0
  1876: 49 21 f0 00              u64 [sp + 240] = 0
  1880: 49 21 90 00              u64 [sp + 144] = 0
  1884: 28 74                    jump @114
      :                          @105
  1886: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1890: 33 09                    a2 = 0
  1892: 95 17 30 01              a0 = sp + 0x130
  1896: 0a 14                    ecalli 20 // 'machine'
  1898: 01                       fallthrough
      :                          @106
  1899: 7b 17 90 00              u64 [sp + 0x90] = a0
  1903: 7a 17 68 03              u32 [sp + 0x368] = a0
  1907: 82 17 38                 a0 = u64 [sp + 0x38]
  1910: 52 17 0e 12              jump @108 if a0 != 14
      :                          @107
  1914: 49 21 c0 00              u64 [sp + 192] = 0
  1918: 49 21 e8 00              u64 [sp + 232] = 0
  1922: 49 21 f0 00              u64 [sp + 240] = 0
  1926: 28 4a                    jump @114
      :                          @108
  1928: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1932: 33 09                    a2 = 0
  1934: 95 17 30 01              a0 = sp + 0x130
  1938: 0a 14                    ecalli 20 // 'machine'
  1940: 01                       fallthrough
      :                          @109
  1941: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  1945: 7a 17 6c 03              u32 [sp + 0x36c] = a0
  1949: 82 17 38                 a0 = u64 [sp + 0x38]
  1952: 52 17 0f 0e              jump @111 if a0 != 15
      :                          @110
  1956: 49 21 c0 00              u64 [sp + 192] = 0
  1960: 49 21 e8 00              u64 [sp + 232] = 0
  1964: 28 24                    jump @114
      :                          @111
  1966: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  1970: 33 09                    a2 = 0
  1972: 95 17 30 01              a0 = sp + 0x130
  1976: 0a 14                    ecalli 20 // 'machine'
  1978: 01                       fallthrough
      :                          @112
  1979: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  1983: 7a 17 70 03              u32 [sp + 0x370] = a0
  1987: 82 17 38                 a0 = u64 [sp + 0x38]
  1990: 52 17 10 63 07           jump @229 if a0 != 16
      :                          @113
  1995: 49 21 c0 00              u64 [sp + 192] = 0
  1999: 01                       fallthrough
      :                          @114
  2000: 82 17 88 00              a0 = u64 [sp + 0x88]
  2004: 82 18 80 00              a1 = u64 [sp + 0x80]
  2008: 82 19 78                 a2 = u64 [sp + 0x78]
  2011: 82 1a 70                 a3 = u64 [sp + 0x70]
  2014: 82 1b 68                 a4 = u64 [sp + 0x68]
  2017: 82 10 60                 ra = u64 [sp + 0x60]
  2020: 82 1c 58                 a5 = u64 [sp + 0x58]
  2023: 82 14 50                 t2 = u64 [sp + 0x50]
  2026: 82 13 48                 t1 = u64 [sp + 0x48]
  2029: 82 12 40                 t0 = u64 [sp + 0x40]
  2032: 01                       fallthrough
      :                          @115
  2033: 97 77 20                 a0 = a0 << 0x20
  2036: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  2040: 97 88 20                 a1 = a1 << 0x20
  2043: 7b 18 88 00              u64 [sp + 0x88] = a1
  2047: 97 99 20                 a2 = a2 << 0x20
  2050: 7b 19 78                 u64 [sp + 0x78] = a2
  2053: 97 aa 20                 a3 = a3 << 0x20
  2056: 7b 1a 70                 u64 [sp + 0x70] = a3
  2059: 97 bb 20                 a4 = a4 << 0x20
  2062: 7b 1b 68                 u64 [sp + 0x68] = a4
  2065: 97 00 20                 ra = ra << 0x20
  2068: 97 c5 20                 s0 = a5 << 0x20
  2071: 97 44 20                 t2 = t2 << 0x20
  2074: 97 33 20                 t1 = t1 << 0x20
  2077: 97 22 20                 t0 = t0 << 0x20
  2080: 82 1c a0 00              a5 = u64 [sp + 0xa0]
  2084: 97 cc 20                 a5 = a5 << 0x20
  2087: 82 1b 98 00              a4 = u64 [sp + 0x98]
  2091: 97 bb 20                 a4 = a4 << 0x20
  2094: 82 1a 90 00              a3 = u64 [sp + 0x90]
  2098: 97 aa 20                 a3 = a3 << 0x20
  2101: 82 19 f0 00              a2 = u64 [sp + 0xf0]
  2105: 97 99 20                 a2 = a2 << 0x20
  2108: 82 18 e8 00              a1 = u64 [sp + 0xe8]
  2112: 97 88 20                 a1 = a1 << 0x20
  2115: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  2119: 97 77 20                 a0 = a0 << 0x20
  2122: 82 16 f8 00              s1 = u64 [sp + 0xf8]
  2126: 98 66 20                 s1 = s1 >> 0x20
  2129: 7b 16 80 00              u64 [sp + 0x80] = s1
  2133: 82 16 88 00              s1 = u64 [sp + 0x88]
  2137: 98 66 20                 s1 = s1 >> 0x20
  2140: 7b 16 60                 u64 [sp + 0x60] = s1
  2143: 82 16 78                 s1 = u64 [sp + 0x78]
  2146: 98 66 20                 s1 = s1 >> 0x20
  2149: 7b 16 78                 u64 [sp + 0x78] = s1
  2152: 82 16 70                 s1 = u64 [sp + 0x70]
  2155: 98 66 20                 s1 = s1 >> 0x20
  2158: 7b 16 70                 u64 [sp + 0x70] = s1
  2161: 82 16 68                 s1 = u64 [sp + 0x68]
  2164: 98 66 20                 s1 = s1 >> 0x20
  2167: 7b 16 68                 u64 [sp + 0x68] = s1
  2170: 98 06 20                 s1 = ra >> 0x20
  2173: 7b 16 58                 u64 [sp + 0x58] = s1
  2176: 98 55 20                 s0 = s0 >> 0x20
  2179: 7b 15 50                 u64 [sp + 0x50] = s0
  2182: 98 46 20                 s1 = t2 >> 0x20
  2185: 7b 16 48                 u64 [sp + 0x48] = s1
  2188: 98 36 20                 s1 = t1 >> 0x20
  2191: 7b 16 40                 u64 [sp + 0x40] = s1
  2194: 98 26 20                 s1 = t0 >> 0x20
  2197: 7b 16 38                 u64 [sp + 0x38] = s1
  2200: 98 cc 20                 a5 = a5 >> 0x20
  2203: 7b 1c 30                 u64 [sp + 0x30] = a5
  2206: 98 bb 20                 a4 = a4 >> 0x20
  2209: 7b 1b 28                 u64 [sp + 0x28] = a4
  2212: 98 aa 20                 a3 = a3 >> 0x20
  2215: 7b 1a 20                 u64 [sp + 0x20] = a3
  2218: 98 99 20                 a2 = a2 >> 0x20
  2221: 7b 19 18                 u64 [sp + 0x18] = a2
  2224: 98 88 20                 a1 = a1 >> 0x20
  2227: 7b 18 10                 u64 [sp + 0x10] = a1
  2230: 98 77 20                 a0 = a0 >> 0x20
  2233: 7b 17 08                 u64 [sp + 0x8] = a0
  2236: 01                       fallthrough
      :                          @116
  2237: 33 05 08 10              s0 = 0x1008
  2241: 95 17 c8 03              a0 = sp + 0x3c8
  2245: 33 08                    a1 = 0
  2247: 33 09 08 10              a2 = 0x1008
  2251: 50 10 16 61 22           ra = 22, jump @704
      :                          @117 [@dyn 11]
  2256: 95 17 c8 03              a0 = sp + 0x3c8
  2260: 33 0a 06                 a3 = 0x6
  2263: 33 06 ff                 s1 = 0xffffffffffffffff
  2266: 33 08                    a1 = 0
  2268: 7b 15 f0 00              u64 [sp + 0xf0] = s0
  2272: 64 59                    a2 = s0
  2274: 33 0b                    a4 = 0
  2276: 33 0c                    a5 = 0
  2278: 0a 12                    ecalli 18 // 'fetch'
  2280: 01                       fallthrough
      :                          @118
  2281: 51 17 ff 84 00           jump @128 if a0 == 4294967295
      :                          @119
  2286: 33 05 01                 s0 = 0x1
  2289: 33 07 79 04 01           a0 = 0x10479
  2294: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  2298: 33 07 90 04 01           a0 = 0x10490
  2303: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  2307: 28 2d                    jump @123
      :                          @120
  2309: 33 0b 17                 a4 = 0x17
  2312: 33 07                    a0 = 0
  2314: 33 08                    a1 = 0
  2316: 33 09                    a2 = 0
  2318: 82 1a e8 00              a3 = u64 [sp + 0xe8]
  2322: 0a 64                    ecalli 100 // 'log'
  2324: 01                       fallthrough
      :                          @121
  2325: 33 08                    a1 = 0
  2327: 82 19 f0 00              a2 = u64 [sp + 0xf0]
  2331: 64 5b                    a4 = s0
  2333: 33 0c                    a5 = 0
  2335: 95 17 c8 03              a0 = sp + 0x3c8
  2339: 33 0a 06                 a3 = 0x6
  2342: 0a 12                    ecalli 18 // 'fetch'
  2344: 01                       fallthrough
      :                          @122
  2345: 95 55 01                 s0 = s0 + 0x1
  2348: 51 17 ff 41              jump @128 if a0 == 4294967295
      :                          @123
  2352: 80 17 c8 03              a0 = u32 [sp + 0x3c8]
  2356: 80 16 cc 03              s1 = u32 [sp + 0x3cc]
  2360: 33 09 01                 a2 = 0x1
  2363: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  2367: 64 68                    a1 = s1
  2369: 0a 17                    ecalli 23 // 'zero'
  2371: 01                       fallthrough
      :                          @124
  2372: 52 07 c1                 jump @120 if a0 != 0
      :                          @125
  2375: 97 69 0c                 a2 = s1 << 0xc
  2378: 33 0a 00 10              a3 = 0x1000
  2382: 82 17 f8 00              a0 = u64 [sp + 0xf8]
  2386: 95 18 d0 03              a1 = sp + 0x3d0
  2390: 0a 16                    ecalli 22 // 'poke'
  2392: 01                       fallthrough
      :                          @126
  2393: 51 07 bc                 jump @121 if a0 == 0
      :                          @127
  2396: 33 0b 17                 a4 = 0x17
  2399: 33 07                    a0 = 0
  2401: 33 08                    a1 = 0
  2403: 33 09                    a2 = 0
  2405: 82 1a c0 00              a3 = u64 [sp + 0xc0]
  2409: 0a 64                    ecalli 100 // 'log'
  2411: 28 aa                    jump @121
      :                          @128
  2413: 95 17 d0 13              a0 = sp + 0x13d0
  2417: 33 08                    a1 = 0
  2419: 82 15 f0 00              s0 = u64 [sp + 0xf0]
  2423: 64 59                    a2 = s0
  2425: 50 10 18 b3 21           ra = 24, jump @704
      :                          @129 [@dyn 12]
  2430: 95 17 d8 23              a0 = sp + 0x23d8
  2434: 33 08                    a1 = 0
  2436: 64 59                    a2 = s0
  2438: 50 10 1a a6 21           ra = 26, jump @704
      :                          @130 [@dyn 13]
  2443: 95 17 e0 33              a0 = sp + 0x33e0
  2447: 33 08                    a1 = 0
  2449: 64 59                    a2 = s0
  2451: 50 10 1c 99 21           ra = 28, jump @704
      :                          @131 [@dyn 14]
  2456: 95 17 78 03              a0 = sp + 0x378
  2460: 95 16 f0 43              s1 = sp + 0x43f0
  2464: 49 26 d0 00              u64 [s1 + 208] = 0
  2468: 95 19 18 44              a2 = sp + 0x4418
  2472: 49 16 f8                 u64 [s1 + 4294967288] = 0
  2475: 49 06                    u64 [s1 + 0] = 0
  2477: 7b 67 28                 u64 [s1 + 0x28] = a0
  2480: 82 17 d8 00              a0 = u64 [sp + 0xd8]
  2484: 7b 67 30                 u64 [s1 + 0x30] = a0
  2487: 82 17 a8 00              a0 = u64 [sp + 0xa8]
  2491: 7b 67 b0 00              u64 [s1 + 0xb0] = a0
  2495: 49 26 b8 00 01           u64 [s1 + 184] = 0x1
  2500: 7b 69 c0 00              u64 [s1 + 0xc0] = a2
  2504: 49 26 c8 00 01           u64 [s1 + 200] = 0x1
  2509: 95 17 f8 43              a0 = sp + 0x43f8
  2513: 95 18 a0 44              a1 = sp + 0x44a0
  2517: 50 10 1e ae 11           ra = 30, jump @409
      :                          @132 [@dyn 15]
  2522: 33 08                    a1 = 0
  2524: 33 09                    a2 = 0
  2526: 82 65 10                 s0 = u64 [s1 + 0x10]
  2529: 82 6b 18                 a4 = u64 [s1 + 0x18]
  2532: 82 66 08                 s1 = u64 [s1 + 0x8]
  2535: 33 07 02                 a0 = 0x2
  2538: 64 5a                    a3 = s0
  2540: 33 00 20                 ra = 0x20
  2543: 0a 64                    ecalli 100 // 'log'
  2545: 01                       fallthrough
      :                          @133 [@dyn 16]
  2546: 82 17 e0 00              a0 = u64 [sp + 0xe0]
  2550: c8 67 07                 a0 = a0 + s1
  2553: 82 19 d0 00              a2 = u64 [sp + 0xd0]
  2557: 53 27 00 f0 20           jump @139 if a0 <u 4294963200
      :                          @134
  2562: 95 97 00 10              a0 = a2 + 0x1000
  2566: 01                       fallthrough
      :                          @135
  2567: 82 78                    a1 = u64 [a0]
  2569: c9 87 09                 a2 = a0 - a1
  2572: ab 59 11                 jump @139 if a2 != s0
      :                          @136
  2575: c9 68 09                 a2 = a1 - s1
  2578: 01                       fallthrough
      :                          @137
  2579: 82 7a                    a3 = u64 [a0]
  2581: ab 8a f2                 jump @135 if a3 != a1
      :                          @138
  2584: 7b 79                    u64 [a0] = a2
  2586: 33 0b                    a4 = 0
  2588: 01                       fallthrough
      :                          @139
  2589: 82 17 78 03              a0 = u64 [sp + 0x378]
  2593: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  2597: 51 07 f9 04              jump @227 if a0 == 0
      :                          @140
  2601: 33 05                    s0 = 0
  2603: 82 17 b8 00              a0 = u64 [sp + 0xb8]
  2607: 82 18 b0 00              a1 = u64 [sp + 0xb0]
  2611: c8 87 07                 a0 = a0 + a1
  2614: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2618: 33 09 79 04 01           a2 = 0x10479
  2623: 7b 19 90 00              u64 [sp + 0x90] = a2
  2627: 33 09 90 04 01           a2 = 0x10490
  2632: 7b 19 b0 00              u64 [sp + 0xb0] = a2
  2636: 33 09 a7 04 01           a2 = 0x104a7
  2641: 7b 19 88 00              u64 [sp + 0x88] = a2
  2645: 14 07 00 00 ff ff 00 00 00 00 a0 = 0xffff0000
  2655: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2659: 14 08 00 00 fe fe 00 00 00 00 a1 = 0xfefe0000
  2669: 7b 18 98 00              u64 [sp + 0x98] = a1
  2673: 49 21 f0 00 08 10        u64 [sp + 240] = 0x1008
  2679: 33 07 01                 a0 = 0x1
  2682: 28 11                    jump @142
      :                          @141
  2684: 82 15 f8 00              s0 = u64 [sp + 0xf8]
  2688: 95 57 01                 a0 = s0 + 0x1
  2691: 82 18 c0 00              a1 = u64 [sp + 0xc0]
  2695: aa 85 e8 03              jump @194 if s0 == a1
      :                          @142
  2699: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  2703: 95 17 f0 43              a0 = sp + 0x43f0
  2707: 7b 75 20                 u64 [a0 + 0x20] = s0
  2710: 95 17 d0 13              a0 = sp + 0x13d0
  2714: 33 08                    a1 = 0
  2716: 82 16 f0 00              s1 = u64 [sp + 0xf0]
  2720: 64 69                    a2 = s1
  2722: 50 10 22 8a 20           ra = 34, jump @704
      :                          @143 [@dyn 17]
  2727: 95 17 d8 23              a0 = sp + 0x23d8
  2731: 33 08                    a1 = 0
  2733: 64 69                    a2 = s1
  2735: 50 10 24 7d 20           ra = 36, jump @704
      :                          @144 [@dyn 18]
  2740: 95 17 e0 33              a0 = sp + 0x33e0
  2744: 33 08                    a1 = 0
  2746: 64 69                    a2 = s1
  2748: 50 10 26 70 20           ra = 38, jump @704
      :                          @145 [@dyn 19]
  2753: 95 17 f0 43              a0 = sp + 0x43f0
  2757: 49 17 f8                 u64 [a0 + 4294967288] = 0
  2760: 49 07                    u64 [a0 + 0] = 0
  2762: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  2766: 51 18 11 a5 04           jump @232 if a1 == 17
      :                          @146
  2771: 97 58 03                 a1 = s0 << 0x3
  2774: 95 87 08                 a0 = a1 + 0x8
  2777: 82 19 c8 00              a2 = u64 [sp + 0xc8]
  2781: ac 79 4b 04              jump @228 if a2 <u a0
      :                          @147
  2785: 82 17 b8 00              a0 = u64 [sp + 0xb8]
  2789: c8 87 07                 a0 = a0 + a1
  2792: 7c 78 05                 a1 = u8 [a0 + 0x5]
  2795: 7c 79 04                 a2 = u8 [a0 + 0x4]
  2798: 7c 7a 06                 a3 = u8 [a0 + 0x6]
  2801: 7d 7b 07                 a4 = i8 [a0 + 0x7]
  2804: 97 88 08                 a1 = a1 << 0x8
  2807: d4 98 08                 a1 = a1 | a2
  2810: 97 aa 10                 a3 = a3 << 0x10
  2813: 97 bb 18                 a4 = a4 << 0x18
  2816: d4 ba 0a                 a3 = a3 | a4
  2819: d4 a8 08                 a1 = a1 | a3
  2822: 52 18 01 d1 02           jump @185 if a1 != 1
      :                          @148
  2827: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  2830: 7c 7b                    a4 = u8 [a0]
  2832: 7c 78 02                 a1 = u8 [a0 + 0x2]
  2835: 7c 79 03                 a2 = u8 [a0 + 0x3]
  2838: 97 a7 08                 a0 = a3 << 0x8
  2841: d4 b7 07                 a0 = a0 | a4
  2844: 97 55 02                 s0 = s0 << 0x2
  2847: 95 16 60 44              s1 = sp + 0x4460
  2851: 49 16 18                 u64 [s1 + 24] = 0
  2854: 49 16 20                 u64 [s1 + 32] = 0
  2857: 95 1a f0 43              a3 = sp + 0x43f0
  2861: 49 1a 28 00 00 01        u64 [a3 + 40] = 0x10000
  2867: 82 1b a0 00              a4 = u64 [sp + 0xa0]
  2871: 7b ab 30                 u64 [a3 + 0x30] = a4
  2874: 95 1c 30 44              a5 = sp + 0x4430
  2878: 49 0c                    u64 [a5 + 0] = 0
  2880: 49 1c 08                 u64 [a5 + 8] = 0
  2883: 49 1c 10                 u64 [a5 + 16] = 0
  2886: 49 1c 18                 u64 [a5 + 24] = 0
  2889: 82 1b 98 00              a4 = u64 [sp + 0x98]
  2893: 7b ab 38                 u64 [a3 + 0x38] = a4
  2896: 49 1a 68 02              u64 [a3 + 104] = 0x2
  2900: 95 1a 38 03              a3 = sp + 0x338
  2904: c8 a5 05                 s0 = s0 + a3
  2907: 80 55                    s0 = u32 [s0]
  2909: 97 88 10                 a1 = a1 << 0x10
  2912: 97 99 18                 a2 = a2 << 0x18
  2915: d4 89 09                 a2 = a2 | a1
  2918: 83 58                    i32 a1 = s0 + 0
  2920: d4 79 0b                 a4 = a2 | a0
  2923: 49 1c 20                 u64 [a5 + 32] = 0
  2926: 49 06                    u64 [s1 + 0] = 0
  2928: 49 16 08                 u64 [s1 + 8] = 0
  2931: 49 16 10                 u64 [s1 + 16] = 0
  2934: 64 57                    a0 = s0
  2936: 7b 15 e8 00              u64 [sp + 0xe8] = s0
  2940: 51 08 35 01              jump @167 if a1 == 0
      :                          @149
  2944: 7b 1b a8 00              u64 [sp + 0xa8] = a4
  2948: 52 18 01 66              jump @156 if a1 != 1
      :                          @150
  2952: 33 09 00 10              a2 = 0x1000
  2956: 95 16 a8 44              s1 = sp + 0x44a8
  2960: 64 67                    a0 = s1
  2962: 33 08                    a1 = 0
  2964: 50 10 28 98 1f           ra = 40, jump @704
      :                          @151 [@dyn 20]
  2969: 95 17 f0 43              a0 = sp + 0x43f0
  2973: 48 27 b0 00              u32 [a0 + 176] = 0
  2977: 48 27 b4 00 10           u32 [a0 + 180] = 0x10
  2982: 33 09 00 00 01           a2 = 0x10000
  2987: 33 0a 00 10              a3 = 0x1000
  2991: 33 07                    a0 = 0
  2993: 64 68                    a1 = s1
  2995: 0a 15                    ecalli 21 // 'peek'
  2997: 01                       fallthrough
      :                          @152
  2998: 51 07 13                 jump @154 if a0 == 0
      :                          @153
  3001: 33 0b 15                 a4 = 0x15
  3004: 33 07                    a0 = 0
  3006: 33 08                    a1 = 0
  3008: 33 09                    a2 = 0
  3010: 82 1a 88 00              a3 = u64 [sp + 0x88]
  3014: 0a 64                    ecalli 100 // 'log'
  3016: 01                       fallthrough
      :                          @154
  3017: 95 17 d0 13              a0 = sp + 0x13d0
  3021: 95 18 a0 44              a1 = sp + 0x44a0
  3025: 82 19 f0 00              a2 = u64 [sp + 0xf0]
  3029: 50 10 2a 9d 1e           ra = 42, jump @687
      :                          @155 [@dyn 21]
  3034: 33 07 01                 a0 = 0x1
  3037: 95 18 e0 23              a1 = sp + 0x23e0
  3041: 7a 87                    u32 [a1] = a0
  3043: 82 1b a8 00              a4 = u64 [sp + 0xa8]
  3047: 28 ca 00                 jump @167
      :                          @156
  3050: 95 56 fe                 s1 = s0 + 0xfffffffffffffffe
  3053: 33 09 00 10              a2 = 0x1000
  3057: 95 15 a8 44              s0 = sp + 0x44a8
  3061: 64 57                    a0 = s0
  3063: 33 08                    a1 = 0
  3065: 50 10 2c 33 1f           ra = 44, jump @704
      :                          @157 [@dyn 22]
  3070: 95 17 f0 43              a0 = sp + 0x43f0
  3074: 7a 76 b0 00              u32 [a0 + 0xb0] = s1
  3078: 48 27 b4 00 10           u32 [a0 + 180] = 0x10
  3083: 97 67 20                 a0 = s1 << 0x20
  3086: 98 77 20                 a0 = a0 >> 0x20
  3089: 33 09 00 00 01           a2 = 0x10000
  3094: 33 0a 00 10              a3 = 0x1000
  3098: 64 58                    a1 = s0
  3100: 0a 15                    ecalli 21 // 'peek'
  3102: 01                       fallthrough
      :                          @158
  3103: 51 07 14                 jump @160 if a0 == 0
      :                          @159
  3106: 33 0a a7 04 01           a3 = 0x104a7
  3111: 33 0b 15                 a4 = 0x15
  3114: 33 07                    a0 = 0
  3116: 33 08                    a1 = 0
  3118: 33 09                    a2 = 0
  3120: 0a 64                    ecalli 100 // 'log'
  3122: 01                       fallthrough
      :                          @160
  3123: 95 17 d0 13              a0 = sp + 0x13d0
  3127: 95 18 a0 44              a1 = sp + 0x44a0
  3131: 82 19 f0 00              a2 = u64 [sp + 0xf0]
  3135: 50 10 2e 33 1e           ra = 46, jump @687
      :                          @161 [@dyn 23]
  3140: 82 16 e8 00              s1 = u64 [sp + 0xe8]
  3144: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  3147: 33 09 00 10              a2 = 0x1000
  3151: 95 15 a8 44              s0 = sp + 0x44a8
  3155: 64 57                    a0 = s0
  3157: 33 08                    a1 = 0
  3159: 50 10 30 d5 1e           ra = 48, jump @704
      :                          @162 [@dyn 24]
  3164: 95 17 f0 43              a0 = sp + 0x43f0
  3168: 7a 76 b0 00              u32 [a0 + 0xb0] = s1
  3172: 48 27 b4 00 10           u32 [a0 + 180] = 0x10
  3177: 97 67 20                 a0 = s1 << 0x20
  3180: 98 77 20                 a0 = a0 >> 0x20
  3183: 33 09 00 00 01           a2 = 0x10000
  3188: 33 0a 00 10              a3 = 0x1000
  3192: 64 58                    a1 = s0
  3194: 0a 15                    ecalli 21 // 'peek'
  3196: 01                       fallthrough
      :                          @163
  3197: 51 07 14                 jump @165 if a0 == 0
      :                          @164
  3200: 33 0a a7 04 01           a3 = 0x104a7
  3205: 33 0b 15                 a4 = 0x15
  3208: 33 07                    a0 = 0
  3210: 33 08                    a1 = 0
  3212: 33 09                    a2 = 0
  3214: 0a 64                    ecalli 100 // 'log'
  3216: 01                       fallthrough
      :                          @165
  3217: 95 17 d8 23              a0 = sp + 0x23d8
  3221: 95 18 a0 44              a1 = sp + 0x44a0
  3225: 82 19 f0 00              a2 = u64 [sp + 0xf0]
  3229: 50 10 32 d5 1d           ra = 50, jump @687
      :                          @166 [@dyn 25]
  3234: 95 17 e0 23              a0 = sp + 0x23e0
  3238: 81 77                    a0 = i32 [a0]
  3240: 82 15 e8 00              s0 = u64 [sp + 0xe8]
  3244: 82 1b a8 00              a4 = u64 [sp + 0xa8]
  3248: 01                       fallthrough
      :                          @167
  3249: 95 19 d0 13              a2 = sp + 0x13d0
  3253: 7a 95                    u32 [a2] = s0
  3255: 48 19 04 10              u32 [a2 + 4] = 0x10
  3259: 95 18 e0 23              a1 = sp + 0x23e0
  3263: 7a 85 f8                 u32 [a1 + 0xfffffffffffffff8] = s0
  3266: 48 18 fc 11              u32 [a1 + 4294967292] = 0x11
  3270: 81 99 08                 a2 = i32 [a2 + 0x8]
  3273: 33 08 10                 a1 = 0x10
  3276: 95 1a f0 43              a3 = sp + 0x43f0
  3280: 7a ab f8                 u32 [a3 + 0xfffffffffffffff8] = a4
  3283: 7a a7                    u32 [a3] = a0
  3285: 7a a9 04                 u32 [a3 + 0x4] = a2
  3288: 33 09 01                 a2 = 0x1
  3291: 64 57                    a0 = s0
  3293: 0a 17                    ecalli 23 // 'zero'
  3295: 01                       fallthrough
      :                          @168
  3296: 51 07 14                 jump @170 if a0 == 0
      :                          @169
  3299: 33 0b 17                 a4 = 0x17
  3302: 33 07                    a0 = 0
  3304: 33 08                    a1 = 0
  3306: 33 09                    a2 = 0
  3308: 82 1a b0 00              a3 = u64 [sp + 0xb0]
  3312: 0a 64                    ecalli 100 // 'log'
  3314: 28 27                    jump @173
      :                          @170
  3316: 33 09 00 00 01           a2 = 0x10000
  3321: 33 0a 00 10              a3 = 0x1000
  3325: 64 57                    a0 = s0
  3327: 95 18 d8 13              a1 = sp + 0x13d8
  3331: 0a 16                    ecalli 22 // 'poke'
  3333: 01                       fallthrough
      :                          @171
  3334: 51 07 13                 jump @173 if a0 == 0
      :                          @172
  3337: 33 0b 17                 a4 = 0x17
  3340: 33 07                    a0 = 0
  3342: 33 08                    a1 = 0
  3344: 33 09                    a2 = 0
  3346: 82 1a 90 00              a3 = u64 [sp + 0x90]
  3350: 0a 64                    ecalli 100 // 'log'
  3352: 01                       fallthrough
      :                          @173
  3353: 95 17 e0 23              a0 = sp + 0x23e0
  3357: 80 76 f8                 s1 = u32 [a0 + 0xfffffffffffffff8]
  3360: 80 75 fc                 s0 = u32 [a0 + 0xfffffffffffffffc]
  3363: 33 09 01                 a2 = 0x1
  3366: 64 67                    a0 = s1
  3368: 64 58                    a1 = s0
  3370: 0a 17                    ecalli 23 // 'zero'
  3372: 01                       fallthrough
      :                          @174
  3373: 51 07 14                 jump @176 if a0 == 0
      :                          @175
  3376: 33 0b 17                 a4 = 0x17
  3379: 33 07                    a0 = 0
  3381: 33 08                    a1 = 0
  3383: 33 09                    a2 = 0
  3385: 82 1a b0 00              a3 = u64 [sp + 0xb0]
  3389: 0a 64                    ecalli 100 // 'log'
  3391: 28 25                    jump @179
      :                          @176
  3393: 97 59 0c                 a2 = s0 << 0xc
  3396: 33 0a 00 10              a3 = 0x1000
  3400: 64 67                    a0 = s1
  3402: 95 18 e0 23              a1 = sp + 0x23e0
  3406: 0a 16                    ecalli 22 // 'poke'
  3408: 01                       fallthrough
      :                          @177
  3409: 51 07 13                 jump @179 if a0 == 0
      :                          @178
  3412: 33 0b 17                 a4 = 0x17
  3415: 33 07                    a0 = 0
  3417: 33 08                    a1 = 0
  3419: 33 09                    a2 = 0
  3421: 82 1a 90 00              a3 = u64 [sp + 0x90]
  3425: 0a 64                    ecalli 100 // 'log'
  3427: 01                       fallthrough
      :                          @179
  3428: 82 15 e8 00              s0 = u64 [sp + 0xe8]
  3432: 64 57                    a0 = s0
  3434: 95 18 18 44              a1 = sp + 0x4418
  3438: 0a 19                    ecalli 25 // 'invoke'
  3440: 64 57                    a0 = s0
  3442: 95 18 e8 33              a1 = sp + 0x33e8
  3446: 95 16 f0 43              s1 = sp + 0x43f0
  3450: 82 69 68                 a2 = u64 [s1 + 0x68]
  3453: 33 0a 00 10              a3 = 0x1000
  3457: 0a 15                    ecalli 21 // 'peek'
  3459: 95 18 e0 33              a1 = sp + 0x33e0
  3463: 81 87 08                 a0 = i32 [a1 + 0x8]
  3466: 7a 85                    u32 [a1] = s0
  3468: 48 18 04 10              u32 [a1 + 4] = 0x10
  3472: 33 08 10                 a1 = 0x10
  3475: 7a 67 fc                 u32 [s1 + 0xfffffffffffffffc] = a0
  3478: 33 09 01                 a2 = 0x1
  3481: 64 57                    a0 = s0
  3483: 0a 17                    ecalli 23 // 'zero'
  3485: 01                       fallthrough
      :                          @180
  3486: 51 07 14                 jump @182 if a0 == 0
      :                          @181
  3489: 33 0b 17                 a4 = 0x17
  3492: 33 07                    a0 = 0
  3494: 33 08                    a1 = 0
  3496: 33 09                    a2 = 0
  3498: 82 1a b0 00              a3 = u64 [sp + 0xb0]
  3502: 0a 64                    ecalli 100 // 'log'
  3504: 28 27                    jump @185
      :                          @182
  3506: 33 09 00 00 01           a2 = 0x10000
  3511: 33 0a 00 10              a3 = 0x1000
  3515: 64 57                    a0 = s0
  3517: 95 18 e8 33              a1 = sp + 0x33e8
  3521: 0a 16                    ecalli 22 // 'poke'
  3523: 01                       fallthrough
      :                          @183
  3524: 51 07 13                 jump @185 if a0 == 0
      :                          @184
  3527: 33 0b 17                 a4 = 0x17
  3530: 33 07                    a0 = 0
  3532: 33 08                    a1 = 0
  3534: 33 09                    a2 = 0
  3536: 82 1a 90 00              a3 = u64 [sp + 0x90]
  3540: 0a 64                    ecalli 100 // 'log'
  3542: 01                       fallthrough
      :                          @185
  3543: 82 18 f0 00              a1 = u64 [sp + 0xf0]
  3547: 95 17 e0 33              a0 = sp + 0x33e0
  3551: 0a 13                    ecalli 19 // 'export'
  3553: 33 07 08 05 01           a0 = 0x10508
  3558: 95 16 f0 43              s1 = sp + 0x43f0
  3562: 95 18 10 44              a1 = sp + 0x4410
  3566: 7b 68 28                 u64 [s1 + 0x28] = a1
  3569: 82 18 d8 00              a1 = u64 [sp + 0xd8]
  3573: 7b 68 30                 u64 [s1 + 0x30] = a1
  3576: 49 26 d0 00              u64 [s1 + 208] = 0
  3580: 7b 67 b0 00              u64 [s1 + 0xb0] = a0
  3584: 49 26 b8 00 01           u64 [s1 + 184] = 0x1
  3589: 95 18 18 44              a1 = sp + 0x4418
  3593: 7b 68 c0 00              u64 [s1 + 0xc0] = a1
  3597: 49 26 c8 00 01           u64 [s1 + 200] = 0x1
  3602: 95 17 88 44              a0 = sp + 0x4488
  3606: 95 18 a0 44              a1 = sp + 0x44a0
  3610: 50 10 34 69 0d           ra = 52, jump @409
      :                          @186 [@dyn 26]
  3615: 82 65 a0 00              s0 = u64 [s1 + 0xa0]
  3619: 82 6b a8 00              a4 = u64 [s1 + 0xa8]
  3623: 82 66 98 00              s1 = u64 [s1 + 0x98]
  3627: 33 07 02                 a0 = 0x2
  3630: 33 08                    a1 = 0
  3632: 33 09                    a2 = 0
  3634: 64 5a                    a3 = s0
  3636: 33 00 36                 ra = 0x36
  3639: 0a 64                    ecalli 100 // 'log'
  3641: 01                       fallthrough
      :                          @187 [@dyn 27]
  3642: 82 17 e0 00              a0 = u64 [sp + 0xe0]
  3646: c8 67 07                 a0 = a0 + s1
  3649: 82 1c d0 00              a5 = u64 [sp + 0xd0]
  3653: 33 02 00 10              t0 = 0x1000
  3657: 53 27 00 f0 33 fc        jump @141 if a0 <u 4294963200
      :                          @188
  3663: c8 2c 08                 a1 = a5 + t0
  3666: 82 87                    a0 = u64 [a1]
  3668: c9 78 09                 a2 = a1 - a0
  3671: ab 59 25 fc              jump @141 if a2 != s0
      :                          @189
  3675: c9 67 09                 a2 = a0 - s1
  3678: 01                       fallthrough
      :                          @190
  3679: 82 8a                    a3 = u64 [a1]
  3681: ab 7a ee                 jump @188 if a3 != a0
      :                          @191
  3684: 7b 89                    u64 [a1] = a2
  3686: 33 0b                    a4 = 0
  3688: 01                       fallthrough
      :                          @192
  3689: ab 7a e6                 jump @188 if a3 != a0
      :                          @193
  3692: 28 10 fc                 jump @141
      :                          @194
  3695: 82 15 78 03              s0 = u64 [sp + 0x378]
  3699: 51 05 ab 00              jump @227 if s0 == 0
      :                          @195
  3703: 82 17 80 00              a0 = u64 [sp + 0x80]
  3707: 0a 1a                    ecalli 26 // 'expunge'
  3709: 01                       fallthrough
      :                          @196
  3710: 95 55 01                 s0 = s0 + 0x1
  3713: 51 15 02 9d 00           jump @227 if s0 == 2
      :                          @197
  3718: 82 17 60                 a0 = u64 [sp + 0x60]
  3721: 0a 1a                    ecalli 26 // 'expunge'
  3723: 01                       fallthrough
      :                          @198
  3724: 51 15 03 92 00           jump @227 if s0 == 3
      :                          @199
  3729: 82 17 78                 a0 = u64 [sp + 0x78]
  3732: 0a 1a                    ecalli 26 // 'expunge'
  3734: 01                       fallthrough
      :                          @200
  3735: 51 15 04 87 00           jump @227 if s0 == 4
      :                          @201
  3740: 82 17 70                 a0 = u64 [sp + 0x70]
  3743: 0a 1a                    ecalli 26 // 'expunge'
  3745: 01                       fallthrough
      :                          @202
  3746: 51 15 05 7c              jump @227 if s0 == 5
      :                          @203
  3750: 82 17 68                 a0 = u64 [sp + 0x68]
  3753: 0a 1a                    ecalli 26 // 'expunge'
  3755: 01                       fallthrough
      :                          @204
  3756: 51 15 06 72              jump @227 if s0 == 6
      :                          @205
  3760: 82 17 58                 a0 = u64 [sp + 0x58]
  3763: 0a 1a                    ecalli 26 // 'expunge'
  3765: 01                       fallthrough
      :                          @206
  3766: 51 15 07 68              jump @227 if s0 == 7
      :                          @207
  3770: 82 17 50                 a0 = u64 [sp + 0x50]
  3773: 0a 1a                    ecalli 26 // 'expunge'
  3775: 01                       fallthrough
      :                          @208
  3776: 51 15 08 5e              jump @227 if s0 == 8
      :                          @209
  3780: 82 17 48                 a0 = u64 [sp + 0x48]
  3783: 0a 1a                    ecalli 26 // 'expunge'
  3785: 01                       fallthrough
      :                          @210
  3786: 51 15 09 54              jump @227 if s0 == 9
      :                          @211
  3790: 82 17 40                 a0 = u64 [sp + 0x40]
  3793: 0a 1a                    ecalli 26 // 'expunge'
  3795: 01                       fallthrough
      :                          @212
  3796: 51 15 0a 4a              jump @227 if s0 == 10
      :                          @213
  3800: 82 17 38                 a0 = u64 [sp + 0x38]
  3803: 0a 1a                    ecalli 26 // 'expunge'
  3805: 01                       fallthrough
      :                          @214
  3806: 51 15 0b 40              jump @227 if s0 == 11
      :                          @215
  3810: 82 17 30                 a0 = u64 [sp + 0x30]
  3813: 0a 1a                    ecalli 26 // 'expunge'
  3815: 01                       fallthrough
      :                          @216
  3816: 51 15 0c 36              jump @227 if s0 == 12
      :                          @217
  3820: 82 17 28                 a0 = u64 [sp + 0x28]
  3823: 0a 1a                    ecalli 26 // 'expunge'
  3825: 01                       fallthrough
      :                          @218
  3826: 51 15 0d 2c              jump @227 if s0 == 13
      :                          @219
  3830: 82 17 20                 a0 = u64 [sp + 0x20]
  3833: 0a 1a                    ecalli 26 // 'expunge'
  3835: 01                       fallthrough
      :                          @220
  3836: 51 15 0e 22              jump @227 if s0 == 14
      :                          @221
  3840: 82 17 18                 a0 = u64 [sp + 0x18]
  3843: 0a 1a                    ecalli 26 // 'expunge'
  3845: 01                       fallthrough
      :                          @222
  3846: 51 15 0f 18              jump @227 if s0 == 15
      :                          @223
  3850: 82 17 10                 a0 = u64 [sp + 0x10]
  3853: 0a 1a                    ecalli 26 // 'expunge'
  3855: 01                       fallthrough
      :                          @224
  3856: 51 15 10 0e              jump @227 if s0 == 16
      :                          @225
  3860: 82 17 08                 a0 = u64 [sp + 0x8]
  3863: 0a 1a                    ecalli 26 // 'expunge'
  3865: 01                       fallthrough
      :                          @226
  3866: 52 15 11 59              jump @232 if s0 != 17
      :                          @227
  3870: 95 19 e8 43              a2 = sp + 0x43e8
  3874: 33 08 10                 a1 = 0x10
  3877: 28 c7 f1                 jump @19
      :                          @228
  3880: 00                       trap
      :                          @229
  3881: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  3885: 33 09                    a2 = 0
  3887: 95 17 30 01              a0 = sp + 0x130
  3891: 0a 14                    ecalli 20 // 'machine'
  3893: 01                       fallthrough
      :                          @230
  3894: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  3898: 7a 17 74 03              u32 [sp + 0x374] = a0
  3902: 82 17 88 00              a0 = u64 [sp + 0x88]
  3906: 82 18 80 00              a1 = u64 [sp + 0x80]
  3910: 82 19 78                 a2 = u64 [sp + 0x78]
  3913: 82 1a 70                 a3 = u64 [sp + 0x70]
  3916: 82 1b 68                 a4 = u64 [sp + 0x68]
  3919: 82 10 60                 ra = u64 [sp + 0x60]
  3922: 82 1c 58                 a5 = u64 [sp + 0x58]
  3925: 82 14 50                 t2 = u64 [sp + 0x50]
  3928: 82 13 48                 t1 = u64 [sp + 0x48]
  3931: 82 12 40                 t0 = u64 [sp + 0x40]
  3934: 82 16 38                 s1 = u64 [sp + 0x38]
  3937: 51 16 11 90 f8           jump @115 if s1 == 17
      :                          @231
  3942: 95 17 30 01              a0 = sp + 0x130
  3946: 82 18 f8 00              a1 = u64 [sp + 0xf8]
  3950: 33 09                    a2 = 0
  3952: 0a 14                    ecalli 20 // 'machine'
  3954: 00                       trap
      :                          @232
  3955: 00                       trap
      :                          @233 [export #1: 'accumulate']
  3956: 95 11 08 f8              sp = sp + 0xfffffffffffff808
  3960: 7b 10 f0 07              u64 [sp + 0x7f0] = ra
  3964: 7b 15 e8 07              u64 [sp + 0x7e8] = s0
  3968: 7b 16 e0 07              u64 [sp + 0x7e0] = s1
  3972: 95 11 60 fc              sp = sp + 0xfffffffffffffc60
  3976: 33 09 08                 a2 = 0x8
  3979: 33 0a 00 00 01           a3 = 0x10000
  3984: ae 98 08                 jump @235 if a1 >=u a2
      :                          @234
  3987: 33 08                    a1 = 0
  3989: 28 c5 01                 jump @296
      :                          @235
  3992: 7c 79 04                 a2 = u8 [a0 + 0x4]
  3995: 7c 7a 05                 a3 = u8 [a0 + 0x5]
  3998: 7c 7b 06                 a4 = u8 [a0 + 0x6]
  4001: 7c 7c 07                 a5 = u8 [a0 + 0x7]
  4004: 95 86 f8                 s1 = a1 + 0xfffffffffffffff8
  4007: 95 77 08                 a0 = a0 + 0x8
  4010: 51 06 0d                 jump @238 if s1 == 0
      :                          @236
  4013: 7d 78                    a1 = i8 [a0]
  4015: 57 08 0c                 jump @239 if a1 <s 0
      :                          @237
  4018: 33 05 01                 s0 = 0x1
  4021: 28 48                    jump @251
      :                          @238
  4023: 33 05                    s0 = 0
  4025: 28 44                    jump @251
      :                          @239
  4027: 84 85 ff 00              s0 = a1 & 0xff
  4031: 55 25 c0 00 0a           jump @241 if s0 >=u 192
      :                          @240
  4036: 33 05 02                 s0 = 0x2
  4039: 28 32                    jump @250
      :                          @241
  4041: 55 25 e0 00 0a           jump @243 if s0 >=u 224
      :                          @242
  4046: 33 05 03                 s0 = 0x3
  4049: 28 28                    jump @250
      :                          @243
  4051: 55 25 f0 00 0a           jump @245 if s0 >=u 240
      :                          @244
  4056: 33 05 04                 s0 = 0x4
  4059: 28 1e                    jump @250
      :                          @245
  4061: 55 25 f8 00 0a           jump @247 if s0 >=u 248
      :                          @246
  4066: 33 05 05                 s0 = 0x5
  4069: 28 14                    jump @250
      :                          @247
  4071: 55 25 fc 00 0a           jump @249 if s0 >=u 252
      :                          @248
  4076: 33 05 06                 s0 = 0x6
  4079: 28 0a                    jump @250
      :                          @249
  4081: 88 58 fe 00              a1 = s0 <u 0xfe
  4085: 9a 85 08                 s0 = 0x8 - a1
  4088: 01                       fallthrough
      :                          @250
  4089: ac 56 59 01              jump @295 if s1 <u s0
      :                          @251
  4093: 7b 1c 10                 u64 [sp + 0x10] = a5
  4096: 7b 1b 18                 u64 [sp + 0x18] = a4
  4099: 7b 1a 20                 u64 [sp + 0x20] = a3
  4102: 7b 19 28                 u64 [sp + 0x28] = a2
  4105: 7b 17 30                 u64 [sp + 0x30] = a0
  4108: 64 58                    a1 = s0
  4110: 50 10 38 6a 16           ra = 56, jump @618
      :                          @252 [@dyn 28]
  4115: 51 07 3f 01              jump @295 if a0 == 0
      :                          @253
  4119: e4 56 07                 a0 = maxu(s1, s0)
  4122: c9 57 07                 a0 = a0 - s0
  4125: 53 17 60 35 01           jump @295 if a0 <u 96
      :                          @254
  4130: 82 18 30                 a1 = u64 [sp + 0x30]
  4133: c8 85 05                 s0 = s0 + a1
  4136: 95 79 a0                 a2 = a0 + 0xffffffffffffffa0
  4139: 95 57 60                 a0 = s0 + 0x60
  4142: 51 09 10                 jump @257 if a2 == 0
      :                          @255
  4145: 7d 78                    a1 = i8 [a0]
  4147: 7b 19 30                 u64 [sp + 0x30] = a2
  4150: 57 08 1d                 jump @259 if a1 <s 0
      :                          @256
  4153: 33 06 01                 s1 = 0x1
  4156: 28 59                    jump @271
      :                          @257
  4158: 64 75                    s0 = a0
  4160: 33 06                    s1 = 0
  4162: 33 07                    a0 = 0
  4164: 64 98                    a1 = a2
  4166: 95 88                    a1 = a1 + 0
  4168: 95 88                    a1 = a1 + 0
  4170: 33 09 21                 a2 = 0x21
  4173: ae 98 67                 jump @273 if a1 >=u a2
      :                          @258
  4176: 28 02 01                 jump @295
      :                          @259
  4179: 84 8a ff 00              a3 = a1 & 0xff
  4183: 55 2a c0 00 0a           jump @261 if a3 >=u 192
      :                          @260
  4188: 33 06 02                 s1 = 0x2
  4191: 28 32                    jump @270
      :                          @261
  4193: 55 2a e0 00 0a           jump @263 if a3 >=u 224
      :                          @262
  4198: 33 06 03                 s1 = 0x3
  4201: 28 28                    jump @270
      :                          @263
  4203: 55 2a f0 00 0a           jump @265 if a3 >=u 240
      :                          @264
  4208: 33 06 04                 s1 = 0x4
  4211: 28 1e                    jump @270
      :                          @265
  4213: 55 2a f8 00 0a           jump @267 if a3 >=u 248
      :                          @266
  4218: 33 06 05                 s1 = 0x5
  4221: 28 14                    jump @270
      :                          @267
  4223: 55 2a fc 00 0a           jump @269 if a3 >=u 252
      :                          @268
  4228: 33 06 06                 s1 = 0x6
  4231: 28 0a                    jump @270
      :                          @269
  4233: 88 a8 fe 00              a1 = a3 <u 0xfe
  4237: 9a 86 08                 s1 = 0x8 - a1
  4240: 01                       fallthrough
      :                          @270
  4241: ac 69 18 09              jump @358 if a2 <u s1
      :                          @271
  4245: 64 75                    s0 = a0
  4247: 64 68                    a1 = s1
  4249: 50 10 3a df 15           ra = 58, jump @618
      :                          @272 [@dyn 29]
  4254: 82 19 30                 a2 = u64 [sp + 0x30]
  4257: e4 69 08                 a1 = maxu(a2, s1)
  4260: c9 68 08                 a1 = a1 - s1
  4263: e4 78 08                 a1 = maxu(a1, a0)
  4266: c9 78 08                 a1 = a1 - a0
  4269: 33 09 21                 a2 = 0x21
  4272: ac 98 a2 00              jump @295 if a1 <u a2
      :                          @273
  4276: c8 56 06                 s1 = s1 + s0
  4279: c8 67 07                 a0 = a0 + s1
  4282: 7c 79 20                 a2 = u8 [a0 + 0x20]
  4285: 51 09 0a                 jump @275 if a2 == 0
      :                          @274
  4288: 33 09                    a2 = 0
  4290: 33 0a                    a3 = 0
  4292: 28 ae 00                 jump @297
      :                          @275
  4295: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
  4298: 95 75 21                 s0 = a0 + 0x21
  4301: 51 0a 10                 jump @278 if a3 == 0
      :                          @276
  4304: 7d 57                    a0 = i8 [s0]
  4306: 7b 1a 30                 u64 [sp + 0x30] = a3
  4309: 57 07 0e                 jump @279 if a0 <s 0
      :                          @277
  4312: 33 06 01                 s1 = 0x1
  4315: 28 4a                    jump @291
      :                          @278
  4317: 33 06                    s1 = 0
  4319: 33 07                    a0 = 0
  4321: 28 51                    jump @293
      :                          @279
  4323: 84 77 ff 00              a0 = a0 & 0xff
  4327: 55 27 c0 00 0a           jump @281 if a0 >=u 192
      :                          @280
  4332: 33 06 02                 s1 = 0x2
  4335: 28 32                    jump @290
      :                          @281
  4337: 55 27 e0 00 0a           jump @283 if a0 >=u 224
      :                          @282
  4342: 33 06 03                 s1 = 0x3
  4345: 28 28                    jump @290
      :                          @283
  4347: 55 27 f0 00 0a           jump @285 if a0 >=u 240
      :                          @284
  4352: 33 06 04                 s1 = 0x4
  4355: 28 1e                    jump @290
      :                          @285
  4357: 55 27 f8 00 0a           jump @287 if a0 >=u 248
      :                          @286
  4362: 33 06 05                 s1 = 0x5
  4365: 28 14                    jump @290
      :                          @287
  4367: 55 27 fc 00 0a           jump @289 if a0 >=u 252
      :                          @288
  4372: 33 06 06                 s1 = 0x6
  4375: 28 0a                    jump @290
      :                          @289
  4377: 88 77 fe 00              a0 = a0 <u 0xfe
  4381: 9a 76 08                 s1 = 0x8 - a0
  4384: 01                       fallthrough
      :                          @290
  4385: ac 6a 88 08              jump @358 if a3 <u s1
      :                          @291
  4389: 64 57                    a0 = s0
  4391: 64 68                    a1 = s1
  4393: 50 10 3c 4f 15           ra = 60, jump @618
      :                          @292 [@dyn 30]
  4398: 82 1a 30                 a3 = u64 [sp + 0x30]
  4401: 01                       fallthrough
      :                          @293
  4402: e4 6a 08                 a1 = maxu(a3, s1)
  4405: c9 68 08                 a1 = a1 - s1
  4408: e6 87 0a                 a3 = minu(a0, a1)
  4411: c8 56 09                 a2 = s1 + s0
  4414: 52 1a 24 34              jump @297 if a3 != 36
      :                          @294
  4418: 80 98 20                 a1 = u32 [a2 + 0x20]
  4421: 64 97                    a0 = a2
  4423: 0a 0e                    ecalli 14 // 'solicit'
  4425: 33 08                    a1 = 0
  4427: 33 0a 00 00 01           a3 = 0x10000
  4432: 28 0a                    jump @296
      :                          @295
  4434: 33 08                    a1 = 0
  4436: 33 0a 00 00 01           a3 = 0x10000
  4441: 01                       fallthrough
      :                          @296
  4442: 64 a7                    a0 = a3
  4444: 95 11 a0 03              sp = sp + 0x3a0
  4448: 82 10 f0 07              ra = u64 [sp + 0x7f0]
  4452: 82 15 e8 07              s0 = u64 [sp + 0x7e8]
  4456: 82 16 e0 07              s1 = u64 [sp + 0x7e0]
  4460: 95 11 f8 07              sp = sp + 0x7f8
  4464: 32 00                    ret
      :                          @297
  4466: 7b 1a 30                 u64 [sp + 0x30] = a3
  4469: 46 11 39                 u8 [sp + 57] = 0
  4472: 7b 19 08                 u64 [sp + 0x8] = a2
  4475: 81 95                    s0 = i32 [a2]
  4477: 95 17 39                 a0 = sp + 0x39
  4480: 33 08 01                 a1 = 0x1
  4483: 0a 03                    ecalli 3 // 'write'
  4485: 82 17 20                 a0 = u64 [sp + 0x20]
  4488: 97 77 08                 a0 = a0 << 0x8
  4491: 82 18 18                 a1 = u64 [sp + 0x18]
  4494: 97 88 10                 a1 = a1 << 0x10
  4497: 82 1a 10                 a3 = u64 [sp + 0x10]
  4500: 97 aa 18                 a3 = a3 << 0x18
  4503: 82 19 28                 a2 = u64 [sp + 0x28]
  4506: d4 97 07                 a0 = a0 | a2
  4509: d4 a8 08                 a1 = a1 | a3
  4512: 46 11 3b 61              u8 [sp + 59] = 0x61
  4516: 46 11 3c 6d              u8 [sp + 60] = 0x6d
  4520: 46 11 3f 54              u8 [sp + 63] = 0x54
  4524: 46 11 44 d1 00           u8 [sp + 68] = 0xd1
  4529: 46 11 45 99 00           u8 [sp + 69] = 0x99
  4534: 46 11 47 57              u8 [sp + 71] = 0x57
  4538: 46 11 48 13              u8 [sp + 72] = 0x13
  4542: 46 11 49 fc              u8 [sp + 73] = 0xfffffffffffffffc
  4546: 46 11 4a 65              u8 [sp + 74] = 0x65
  4550: 46 11 4b f5              u8 [sp + 75] = 0xfffffffffffffff5
  4554: 46 11 4c 31              u8 [sp + 76] = 0x31
  4558: 46 11 4d 03              u8 [sp + 77] = 0x3
  4562: 46 11 4e 8e 00           u8 [sp + 78] = 0x8e
  4567: 46 11 4f 73              u8 [sp + 79] = 0x73
  4571: 46 11 51 d8 00           u8 [sp + 81] = 0xd8
  4576: 46 11 52 85 00           u8 [sp + 82] = 0x85
  4581: 46 11 53 64              u8 [sp + 83] = 0x64
  4585: 46 11 54 56              u8 [sp + 84] = 0x56
  4589: 46 11 55 32              u8 [sp + 85] = 0x32
  4593: 46 11 56 c8 00           u8 [sp + 86] = 0xc8
  4598: 46 11 3d 44              u8 [sp + 61] = 0x44
  4602: 46 11 3e 4f              u8 [sp + 62] = 0x4f
  4606: 46 11 46 50              u8 [sp + 70] = 0x50
  4610: 46 11 57 ae 00           u8 [sp + 87] = 0xae
  4615: 46 11 58 50              u8 [sp + 88] = 0x50
  4619: 46 11 59 3c              u8 [sp + 89] = 0x3c
  4623: 46 11 5a 4f              u8 [sp + 90] = 0x4f
  4627: 46 11 5b 0c              u8 [sp + 91] = 0xc
  4631: 46 11 5c 4d              u8 [sp + 92] = 0x4d
  4635: 46 11 5d 5e              u8 [sp + 93] = 0x5e
  4639: 46 11 43 19              u8 [sp + 67] = 0x19
  4643: 46 11 5e 19              u8 [sp + 94] = 0x19
  4647: 46 11 5f a7 00           u8 [sp + 95] = 0xa7
  4652: 46 11 60 bf 00           u8 [sp + 96] = 0xbf
  4657: 46 11 61 a9 00           u8 [sp + 97] = 0xa9
  4662: 46 11 62 bb 00           u8 [sp + 98] = 0xbb
  4667: 46 11 63 0f              u8 [sp + 99] = 0xf
  4671: 46 11 64 a4 00           u8 [sp + 100] = 0xa4
  4676: 46 11 65 96 00           u8 [sp + 101] = 0x96
  4681: 46 11 66 87 00           u8 [sp + 102] = 0x87
  4686: 46 11 67 47              u8 [sp + 103] = 0x47
  4690: 46 11 68 e6              u8 [sp + 104] = 0xffffffffffffffe6
  4694: 46 11 69 3d              u8 [sp + 105] = 0x3d
  4698: 46 11 6a 3c              u8 [sp + 106] = 0x3c
  4702: 33 0c 4a                 a5 = 0x4a
  4705: 46 11 41 0d              u8 [sp + 65] = 0xd
  4709: 46 11 3a 6a              u8 [sp + 58] = 0x6a
  4713: 46 11 40 6a              u8 [sp + 64] = 0x6a
  4717: 78 1c 42                 u8 [sp + 0x42] = a5
  4720: 46 11 50 f1              u8 [sp + 80] = 0xfffffffffffffff1
  4724: 46 11 6b f1              u8 [sp + 107] = 0xfffffffffffffff1
  4728: 46 11 6c e7              u8 [sp + 108] = 0xffffffffffffffe7
  4732: 78 1c 6d                 u8 [sp + 0x6d] = a5
  4735: 46 11 6e 49              u8 [sp + 110] = 0x49
  4739: 46 11 6f dd 00           u8 [sp + 111] = 0xdd
  4744: 46 11 70 c4 00           u8 [sp + 112] = 0xc4
  4749: 46 11 71 a6 00           u8 [sp + 113] = 0xa6
  4754: 46 11 72 ec              u8 [sp + 114] = 0xffffffffffffffec
  4758: 46 11 73 a8 00           u8 [sp + 115] = 0xa8
  4763: 46 11 78 9d 00           u8 [sp + 120] = 0x9d
  4768: 46 11 79 a3 00           u8 [sp + 121] = 0xa3
  4773: 46 11 74 9a 00           u8 [sp + 116] = 0x9a
  4778: 46 11 75 6a              u8 [sp + 117] = 0x6a
  4782: 46 11 76 6f              u8 [sp + 118] = 0x6f
  4786: 46 11 77 33              u8 [sp + 119] = 0x33
  4790: 46 11 7a 33              u8 [sp + 122] = 0x33
  4794: 46 11 7b 7f              u8 [sp + 123] = 0x7f
  4798: d4 78 06                 s1 = a1 | a0
  4801: 46 11 7c d2 00           u8 [sp + 124] = 0xd2
  4806: 46 11 7d eb              u8 [sp + 125] = 0xffffffffffffffeb
  4810: 46 11 7e 55              u8 [sp + 126] = 0x55
  4814: 46 11 7f 07              u8 [sp + 127] = 0x7
  4818: 95 17 80 00              a0 = sp + 0x80
  4822: 33 09 00 01              a2 = 0x100
  4826: 33 08                    a1 = 0
  4828: 50 10 3e 50 18           ra = 62, jump @704
      :                          @298 [@dyn 31]
  4833: 95 57 ff                 a0 = s0 + 0xffffffffffffffff
  4836: 56 17 09 f0 05           jump @347 if a0 >u 9
      :                          @299
  4841: 97 77 02                 a0 = a0 << 0x2
  4844: 33 08 00 00 01           a1 = 0x10000
  4849: c8 87 07                 a0 = a0 + a1
  4852: 81 77                    a0 = i32 [a0]
  4854: c8 87 07                 a0 = a0 + a1
  4857: 32 07                    jump [a0]
      :                          @300 [@dyn 32]
  4859: 95 18 3a                 a1 = sp + 0x3a
  4862: 33 09 03                 a2 = 0x3
  4865: 95 1a 80 00              a3 = sp + 0x80
  4869: 33 0c 00 01              a5 = 0x100
  4873: 64 67                    a0 = s1
  4875: 33 0b                    a4 = 0
  4877: 0a 02                    ecalli 2 // 'read'
  4879: 33 08 01                 a1 = 0x1
  4882: 50 10 42 0a 14           ra = 66, jump @642
      :                          @301 [@dyn 33]
  4887: 33 08 5c 00 01           a1 = 0x1005c
  4892: 33 0a 5d 00 01           a3 = 0x1005d
  4897: 33 07 02                 a0 = 0x2
  4900: 33 09 01                 a2 = 0x1
  4903: 33 0b 1a                 a4 = 0x1a
  4906: 0a 64                    ecalli 100 // 'log'
  4908: 95 17 3a                 a0 = sp + 0x3a
  4911: 33 08 03                 a1 = 0x3
  4914: 95 19 3d                 a2 = sp + 0x3d
  4917: 33 0a 03                 a3 = 0x3
  4920: 0a 03                    ecalli 3 // 'write'
  4922: 33 08 02                 a1 = 0x2
  4925: 50 10 44 df 13           ra = 68, jump @642
      :                          @302 [@dyn 34]
  4930: 33 08 77 00 01           a1 = 0x10077
  4935: 33 0a 78 00 01           a3 = 0x10078
  4940: 33 07 02                 a0 = 0x2
  4943: 33 09 01                 a2 = 0x1
  4946: 33 0b 19                 a4 = 0x19
  4949: 0a 64                    ecalli 100 // 'log'
  4951: 95 18 3a                 a1 = sp + 0x3a
  4954: 33 09 03                 a2 = 0x3
  4957: 95 1a 80 00              a3 = sp + 0x80
  4961: 33 0c 00 01              a5 = 0x100
  4965: 64 67                    a0 = s1
  4967: 33 0b                    a4 = 0
  4969: 0a 02                    ecalli 2 // 'read'
  4971: 33 08 05                 a1 = 0x5
  4974: 50 10 46 ae 13           ra = 70, jump @642
      :                          @303 [@dyn 35]
  4979: 33 08 91 00 01           a1 = 0x10091
  4984: 33 0a 92 00 01           a3 = 0x10092
  4989: 33 07 02                 a0 = 0x2
  4992: 33 09 01                 a2 = 0x1
  4995: 33 0b 1b                 a4 = 0x1b
  4998: 0a 64                    ecalli 100 // 'log'
  5000: 95 17 3a                 a0 = sp + 0x3a
  5003: 33 08                    a1 = 0
  5005: 0a 0f                    ecalli 15 // 'forget'
  5007: 33 08 06                 a1 = 0x6
  5010: 50 10 48 8a 13           ra = 72, jump @642
      :                          @304 [@dyn 36]
  5015: 33 08 ad 00 01           a1 = 0x100ad
  5020: 33 0a ae 00 01           a3 = 0x100ae
  5025: 33 07 02                 a0 = 0x2
  5028: 33 09 01                 a2 = 0x1
  5031: 33 0b 16                 a4 = 0x16
  5034: 0a 64                    ecalli 100 // 'log'
  5036: 28 28 05                 jump @347
      :                          @305 [@dyn 37]
  5039: 95 18 40                 a1 = sp + 0x40
  5042: 95 19 80 00              a2 = sp + 0x80
  5046: 33 0b 03                 a4 = 0x3
  5049: 64 67                    a0 = s1
  5051: 33 0a                    a3 = 0
  5053: 0a 01                    ecalli 1 // 'lookup'
  5055: 33 08 01                 a1 = 0x1
  5058: 50 10 4c 5a 13           ra = 76, jump @642
      :                          @306 [@dyn 38]
  5063: 33 08 5c 00 01           a1 = 0x1005c
  5068: 33 0a e7 01 01           a3 = 0x101e7
  5073: 33 07 02                 a0 = 0x2
  5076: 33 09 01                 a2 = 0x1
  5079: 33 0b 1e                 a4 = 0x1e
  5082: 0a 64                    ecalli 100 // 'log'
  5084: 95 17 40                 a0 = sp + 0x40
  5087: 33 08 03                 a1 = 0x3
  5090: 0a 0d                    ecalli 13 // 'query'
  5092: 33 08 02                 a1 = 0x2
  5095: 50 10 4e 35 13           ra = 78, jump @642
      :                          @307 [@dyn 39]
  5100: 33 08 77 00 01           a1 = 0x10077
  5105: 33 0a 8f 01 01           a3 = 0x1018f
  5110: 33 07 02                 a0 = 0x2
  5113: 33 09 01                 a2 = 0x1
  5116: 33 0b 24                 a4 = 0x24
  5119: 0a 64                    ecalli 100 // 'log'
  5121: 95 18 40                 a1 = sp + 0x40
  5124: 64 67                    a0 = s1
  5126: 0a 0c                    ecalli 12 // 'eject'
  5128: 33 08 05                 a1 = 0x5
  5131: 50 10 50 11 13           ra = 80, jump @642
      :                          @308 [@dyn 40]
  5136: 33 08 91 00 01           a1 = 0x10091
  5141: 33 0a 05 02 01           a3 = 0x10205
  5146: 33 07 02                 a0 = 0x2
  5149: 33 09 01                 a2 = 0x1
  5152: 33 0b 11                 a4 = 0x11
  5155: 0a 64                    ecalli 100 // 'log'
  5157: 14 07 ff ff ff ff ff ff 00 00 a0 = 0xffffffffffff
  5167: 95 1a 40                 a3 = sp + 0x40
  5170: 33 08                    a1 = 0
  5172: 33 09                    a2 = 0
  5174: 33 0b                    a4 = 0
  5176: 0a 05                    ecalli 5 // 'bless'
  5178: 33 08 06                 a1 = 0x6
  5181: 50 10 52 df 12           ra = 82, jump @642
      :                          @309 [@dyn 41]
  5186: 33 08 ad 00 01           a1 = 0x100ad
  5191: 33 0a 16 02 01           a3 = 0x10216
  5196: 33 07 02                 a0 = 0x2
  5199: 33 09 01                 a2 = 0x1
  5202: 33 0b 11                 a4 = 0x11
  5205: 0a 64                    ecalli 100 // 'log'
  5207: 28 7d 04                 jump @347
      :                          @310 [@dyn 42]
  5210: 95 17 3d                 a0 = sp + 0x3d
  5213: 33 08 03                 a1 = 0x3
  5216: 33 09                    a2 = 0
  5218: 33 0a                    a3 = 0
  5220: 0a 03                    ecalli 3 // 'write'
  5222: 33 08 01                 a1 = 0x1
  5225: 50 10 56 b3 12           ra = 86, jump @642
      :                          @311 [@dyn 43]
  5230: 33 08 5c 00 01           a1 = 0x1005c
  5235: 7b 15 28                 u64 [sp + 0x28] = s0
  5238: 33 05 ec 02 01           s0 = 0x102ec
  5243: 33 07 02                 a0 = 0x2
  5246: 33 09 01                 a2 = 0x1
  5249: 33 0b 1e                 a4 = 0x1e
  5252: 33 0a ec 02 01           a3 = 0x102ec
  5257: 0a 64                    ecalli 100 // 'log'
  5259: 95 17 3d                 a0 = sp + 0x3d
  5262: 33 08 03                 a1 = 0x3
  5265: 95 19 3a                 a2 = sp + 0x3a
  5268: 33 0a 03                 a3 = 0x3
  5271: 0a 03                    ecalli 3 // 'write'
  5273: 33 08 02                 a1 = 0x2
  5276: 50 10 58 80 12           ra = 88, jump @642
      :                          @312 [@dyn 44]
  5281: 33 08 77 00 01           a1 = 0x10077
  5286: 33 0a 0a 03 01           a3 = 0x1030a
  5291: 33 07 02                 a0 = 0x2
  5294: 33 09 01                 a2 = 0x1
  5297: 33 0b 19                 a4 = 0x19
  5300: 0a 64                    ecalli 100 // 'log'
  5302: 95 17 3d                 a0 = sp + 0x3d
  5305: 33 08 03                 a1 = 0x3
  5308: 33 09                    a2 = 0
  5310: 33 0a                    a3 = 0
  5312: 0a 03                    ecalli 3 // 'write'
  5314: 33 08 05                 a1 = 0x5
  5317: 50 10 5a 57 12           ra = 90, jump @642
      :                          @313 [@dyn 45]
  5322: 33 08 91 00 01           a1 = 0x10091
  5327: 33 0a 23 03 01           a3 = 0x10323
  5332: 33 07 02                 a0 = 0x2
  5335: 33 09 01                 a2 = 0x1
  5338: 33 0b 1f                 a4 = 0x1f
  5341: 0a 64                    ecalli 100 // 'log'
  5343: 95 18 3d                 a1 = sp + 0x3d
  5346: 33 09 03                 a2 = 0x3
  5349: 95 1a 80 00              a3 = sp + 0x80
  5353: 33 0c 00 01              a5 = 0x100
  5357: 64 67                    a0 = s1
  5359: 33 0b                    a4 = 0
  5361: 0a 02                    ecalli 2 // 'read'
  5363: 33 08 06                 a1 = 0x6
  5366: 50 10 5c 26 12           ra = 92, jump @642
      :                          @314 [@dyn 46]
  5371: 33 08 ad 00 01           a1 = 0x100ad
  5376: 33 0a 42 03 01           a3 = 0x10342
  5381: 33 07 02                 a0 = 0x2
  5384: 33 09 01                 a2 = 0x1
  5387: 33 0b 1a                 a4 = 0x1a
  5390: 0a 64                    ecalli 100 // 'log'
  5392: 95 17 3d                 a0 = sp + 0x3d
  5395: 33 08 03                 a1 = 0x3
  5398: 33 09                    a2 = 0
  5400: 33 0a                    a3 = 0
  5402: 0a 03                    ecalli 3 // 'write'
  5404: 33 08 07                 a1 = 0x7
  5407: 50 10 5e fd 11           ra = 94, jump @642
      :                          @315 [@dyn 47]
  5412: 33 08 5c 03 01           a1 = 0x1035c
  5417: 33 07 02                 a0 = 0x2
  5420: 33 09 01                 a2 = 0x1
  5423: 33 0b 1e                 a4 = 0x1e
  5426: 64 5a                    a3 = s0
  5428: 82 15 28                 s0 = u64 [sp + 0x28]
  5431: 0a 64                    ecalli 100 // 'log'
  5433: 28 9b 03                 jump @347
      :                          @316 [@dyn 48]
  5436: 95 17 40                 a0 = sp + 0x40
  5439: 33 08 03                 a1 = 0x3
  5442: 0a 0e                    ecalli 14 // 'solicit'
  5444: 33 08 01                 a1 = 0x1
  5447: 50 10 62 d5 11           ra = 98, jump @642
      :                          @317 [@dyn 49]
  5452: 33 08 5c 00 01           a1 = 0x1005c
  5457: 33 0a 18 01 01           a3 = 0x10118
  5462: 33 07 02                 a0 = 0x2
  5465: 33 09 01                 a2 = 0x1
  5468: 33 0b 1c                 a4 = 0x1c
  5471: 0a 64                    ecalli 100 // 'log'
  5473: 95 17 40                 a0 = sp + 0x40
  5476: 33 08 03                 a1 = 0x3
  5479: 0a 0d                    ecalli 13 // 'query'
  5481: 33 08 02                 a1 = 0x2
  5484: 50 10 64 b0 11           ra = 100, jump @642
      :                          @318 [@dyn 50]
  5489: 33 08 77 00 01           a1 = 0x10077
  5494: 33 0a 34 01 01           a3 = 0x10134
  5499: 33 07 02                 a0 = 0x2
  5502: 33 09 01                 a2 = 0x1
  5505: 33 0b 1a                 a4 = 0x1a
  5508: 0a 64                    ecalli 100 // 'log'
  5510: 95 17 60                 a0 = sp + 0x60
  5513: 33 08 03                 a1 = 0x3
  5516: 0a 0d                    ecalli 13 // 'query'
  5518: 33 08 05                 a1 = 0x5
  5521: 50 10 66 8b 11           ra = 102, jump @642
      :                          @319 [@dyn 51]
  5526: 33 08 91 00 01           a1 = 0x10091
  5531: 33 0a 4e 01 01           a3 = 0x1014e
  5536: 33 07 02                 a0 = 0x2
  5539: 33 09 01                 a2 = 0x1
  5542: 33 0b 1c                 a4 = 0x1c
  5545: 0a 64                    ecalli 100 // 'log'
  5547: 28 29 03                 jump @347
      :                          @320 [@dyn 52]
  5550: 95 17 40                 a0 = sp + 0x40
  5553: 33 08 03                 a1 = 0x3
  5556: 0a 0f                    ecalli 15 // 'forget'
  5558: 33 08 01                 a1 = 0x1
  5561: 50 10 6a 63 11           ra = 106, jump @642
      :                          @321 [@dyn 53]
  5566: 33 08 5c 00 01           a1 = 0x1005c
  5571: 33 0a 6a 01 01           a3 = 0x1016a
  5576: 33 07 02                 a0 = 0x2
  5579: 33 09 01                 a2 = 0x1
  5582: 33 0b 25                 a4 = 0x25
  5585: 0a 64                    ecalli 100 // 'log'
  5587: 95 17 40                 a0 = sp + 0x40
  5590: 33 08 03                 a1 = 0x3
  5593: 0a 0d                    ecalli 13 // 'query'
  5595: 33 08 02                 a1 = 0x2
  5598: 50 10 6c 3e 11           ra = 108, jump @642
      :                          @322 [@dyn 54]
  5603: 33 08 77 00 01           a1 = 0x10077
  5608: 33 0a 8f 01 01           a3 = 0x1018f
  5613: 33 07 02                 a0 = 0x2
  5616: 33 09 01                 a2 = 0x1
  5619: 33 0b 24                 a4 = 0x24
  5622: 0a 64                    ecalli 100 // 'log'
  5624: 95 18 60                 a1 = sp + 0x60
  5627: 95 19 80 00              a2 = sp + 0x80
  5631: 33 0b 03                 a4 = 0x3
  5634: 64 67                    a0 = s1
  5636: 33 0a                    a3 = 0
  5638: 0a 01                    ecalli 1 // 'lookup'
  5640: 33 08 05                 a1 = 0x5
  5643: 50 10 6e 11 11           ra = 110, jump @642
      :                          @323 [@dyn 55]
  5648: 33 08 91 00 01           a1 = 0x10091
  5653: 33 0a b3 01 01           a3 = 0x101b3
  5658: 33 07 02                 a0 = 0x2
  5661: 33 09 01                 a2 = 0x1
  5664: 33 0b 1d                 a4 = 0x1d
  5667: 0a 64                    ecalli 100 // 'log'
  5669: 33 07 e8 03              a0 = 0x3e8
  5673: 95 18 3a                 a1 = sp + 0x3a
  5676: 0a 06                    ecalli 6 // 'assign'
  5678: 33 08 06                 a1 = 0x6
  5681: 50 10 70 eb 10           ra = 112, jump @642
      :                          @324 [@dyn 56]
  5686: 33 08 ad 00 01           a1 = 0x100ad
  5691: 33 0a d0 01 01           a3 = 0x101d0
  5696: 33 07 02                 a0 = 0x2
  5699: 33 09 01                 a2 = 0x1
  5702: 33 0b 17                 a4 = 0x17
  5705: 0a 64                    ecalli 100 // 'log'
  5707: 28 89 02                 jump @347
      :                          @325 [@dyn 57]
  5710: 95 18 40                 a1 = sp + 0x40
  5713: 95 19 80 00              a2 = sp + 0x80
  5717: 33 0b 03                 a4 = 0x3
  5720: 64 67                    a0 = s1
  5722: 33 0a                    a3 = 0
  5724: 0a 01                    ecalli 1 // 'lookup'
  5726: 33 08 01                 a1 = 0x1
  5729: 50 10 74 bb 10           ra = 116, jump @642
      :                          @326 [@dyn 58]
  5734: 33 08 5c 00 01           a1 = 0x1005c
  5739: 33 0a e7 01 01           a3 = 0x101e7
  5744: 33 07 02                 a0 = 0x2
  5747: 33 09 01                 a2 = 0x1
  5750: 33 0b 1e                 a4 = 0x1e
  5753: 0a 64                    ecalli 100 // 'log'
  5755: 95 17 40                 a0 = sp + 0x40
  5758: 33 08 03                 a1 = 0x3
  5761: 0a 0d                    ecalli 13 // 'query'
  5763: 33 08 02                 a1 = 0x2
  5766: 50 10 76 96 10           ra = 118, jump @642
      :                          @327 [@dyn 59]
  5771: 33 08 77 00 01           a1 = 0x10077
  5776: 33 0a 8f 01 01           a3 = 0x1018f
  5781: 33 07 02                 a0 = 0x2
  5784: 33 09 01                 a2 = 0x1
  5787: 33 0b 24                 a4 = 0x24
  5790: 0a 64                    ecalli 100 // 'log'
  5792: 28 34 02                 jump @347
      :                          @328 [@dyn 60]
  5795: 95 18 3a                 a1 = sp + 0x3a
  5798: 33 09 03                 a2 = 0x3
  5801: 95 1a 80 00              a3 = sp + 0x80
  5805: 33 0c 00 01              a5 = 0x100
  5809: 64 67                    a0 = s1
  5811: 33 0b                    a4 = 0
  5813: 0a 02                    ecalli 2 // 'read'
  5815: 33 08 01                 a1 = 0x1
  5818: 50 10 7a 62 10           ra = 122, jump @642
      :                          @329 [@dyn 61]
  5823: 33 08 5c 00 01           a1 = 0x1005c
  5828: 33 0a c4 00 01           a3 = 0x100c4
  5833: 33 07 02                 a0 = 0x2
  5836: 33 09 01                 a2 = 0x1
  5839: 33 0b 1b                 a4 = 0x1b
  5842: 0a 64                    ecalli 100 // 'log'
  5844: 95 17 3a                 a0 = sp + 0x3a
  5847: 33 08 03                 a1 = 0x3
  5850: 33 09                    a2 = 0
  5852: 33 0a                    a3 = 0
  5854: 0a 03                    ecalli 3 // 'write'
  5856: 33 08 02                 a1 = 0x2
  5859: 50 10 7c 39 10           ra = 124, jump @642
      :                          @330 [@dyn 62]
  5864: 33 08 77 00 01           a1 = 0x10077
  5869: 33 0a df 00 01           a3 = 0x100df
  5874: 33 07 02                 a0 = 0x2
  5877: 33 09 01                 a2 = 0x1
  5880: 33 0b 1f                 a4 = 0x1f
  5883: 0a 64                    ecalli 100 // 'log'
  5885: 95 18 3a                 a1 = sp + 0x3a
  5888: 33 09 03                 a2 = 0x3
  5891: 95 1a 80 00              a3 = sp + 0x80
  5895: 33 0c 00 01              a5 = 0x100
  5899: 64 67                    a0 = s1
  5901: 33 0b                    a4 = 0
  5903: 0a 02                    ecalli 2 // 'read'
  5905: 33 08 05                 a1 = 0x5
  5908: 50 10 7e 08 10           ra = 126, jump @642
      :                          @331 [@dyn 63]
  5913: 33 08 91 00 01           a1 = 0x10091
  5918: 33 0a fe 00 01           a3 = 0x100fe
  5923: 33 07 02                 a0 = 0x2
  5926: 33 09 01                 a2 = 0x1
  5929: 33 0b 1a                 a4 = 0x1a
  5932: 0a 64                    ecalli 100 // 'log'
  5934: 28 a6 01                 jump @347
      :                          @332 [@dyn 64]
  5937: 7b 16 20                 u64 [sp + 0x20] = s1
  5940: 7b 15 28                 u64 [sp + 0x28] = s0
  5943: 95 17 40                 a0 = sp + 0x40
  5946: 33 08 03                 a1 = 0x3
  5949: 0a 0e                    ecalli 14 // 'solicit'
  5951: 33 08 01                 a1 = 0x1
  5954: 50 20 82 00 da 0f        ra = 130, jump @642
      :                          @333 [@dyn 65]
  5960: 33 08 5c 00 01           a1 = 0x1005c
  5965: 33 0a 27 02 01           a3 = 0x10227
  5970: 33 07 02                 a0 = 0x2
  5973: 33 09 01                 a2 = 0x1
  5976: 33 0b 26                 a4 = 0x26
  5979: 0a 64                    ecalli 100 // 'log'
  5981: 95 17 40                 a0 = sp + 0x40
  5984: 33 08 03                 a1 = 0x3
  5987: 0a 0d                    ecalli 13 // 'query'
  5989: 33 08 02                 a1 = 0x2
  5992: 50 20 84 00 b4 0f        ra = 132, jump @642
      :                          @334 [@dyn 66]
  5998: 33 08 77 00 01           a1 = 0x10077
  6003: 33 0a 4d 02 01           a3 = 0x1024d
  6008: 33 07 02                 a0 = 0x2
  6011: 33 09 01                 a2 = 0x1
  6014: 33 0b 24                 a4 = 0x24
  6017: 0a 64                    ecalli 100 // 'log'
  6019: 33 06 00 0a              s1 = 0xa00
  6023: 95 17 80 01              a0 = sp + 0x180
  6027: 95 15 80 01              s0 = sp + 0x180
  6031: 33 08                    a1 = 0
  6033: 33 09 00 0a              a2 = 0xa00
  6037: 50 20 86 00 97 13        ra = 134, jump @704
      :                          @335 [@dyn 67]
  6043: c8 56 06                 s1 = s1 + s0
  6046: 01                       fallthrough
      :                          @336
  6047: 95 18 40                 a1 = sp + 0x40
  6050: 33 09 20                 a2 = 0x20
  6053: 64 57                    a0 = s0
  6055: 50 20 88 00 cb 12        ra = 136, jump @687
      :                          @337 [@dyn 68]
  6061: 95 55 20                 s0 = s0 + 0x20
  6064: ab 65 ef                 jump @336 if s0 != s1
      :                          @338
  6067: 95 18 80 01              a1 = sp + 0x180
  6071: 33 07                    a0 = 0
  6073: 0a 06                    ecalli 6 // 'assign'
  6075: 33 08 05                 a1 = 0x5
  6078: 50 20 8a 00 5e 0f        ra = 138, jump @642
      :                          @339 [@dyn 69]
  6084: 33 08 91 00 01           a1 = 0x10091
  6089: 33 0a 71 02 01           a3 = 0x10271
  6094: 33 07 02                 a0 = 0x2
  6097: 33 09 01                 a2 = 0x1
  6100: 33 0b 11                 a4 = 0x11
  6103: 0a 64                    ecalli 100 // 'log'
  6105: 82 15 28                 s0 = u64 [sp + 0x28]
  6108: 82 16 20                 s1 = u64 [sp + 0x20]
  6111: 28 f5 00                 jump @347
      :                          @340 [@dyn 70]
  6114: 95 17 40                 a0 = sp + 0x40
  6117: 33 08 03                 a1 = 0x3
  6120: 0a 0f                    ecalli 15 // 'forget'
  6122: 33 08 01                 a1 = 0x1
  6125: 50 20 8e 00 2f 0f        ra = 142, jump @642
      :                          @341 [@dyn 71]
  6131: 33 08 5c 00 01           a1 = 0x1005c
  6136: 33 0a 82 02 01           a3 = 0x10282
  6141: 33 07 02                 a0 = 0x2
  6144: 33 09 01                 a2 = 0x1
  6147: 33 0b 1b                 a4 = 0x1b
  6150: 0a 64                    ecalli 100 // 'log'
  6152: 95 17 40                 a0 = sp + 0x40
  6155: 33 08 03                 a1 = 0x3
  6158: 0a 0d                    ecalli 13 // 'query'
  6160: 33 08 02                 a1 = 0x2
  6163: 50 20 90 00 09 0f        ra = 144, jump @642
      :                          @342 [@dyn 72]
  6169: 33 08 77 00 01           a1 = 0x10077
  6174: 33 0a 8f 01 01           a3 = 0x1018f
  6179: 33 07 02                 a0 = 0x2
  6182: 33 09 01                 a2 = 0x1
  6185: 33 0b 24                 a4 = 0x24
  6188: 0a 64                    ecalli 100 // 'log'
  6190: 28 a6 00                 jump @347
      :                          @343 [@dyn 73]
  6193: 7b 16 20                 u64 [sp + 0x20] = s1
  6196: 64 56                    s1 = s0
  6198: 33 05 8f 03              s0 = 0x38f
  6202: 95 17 40                 a0 = sp + 0x40
  6205: 33 08 03                 a1 = 0x3
  6208: 33 09 8f 03              a2 = 0x38f
  6212: 33 0a 8f 03              a3 = 0x38f
  6216: 0a 09                    ecalli 9 // 'new'
  6218: 33 08 01                 a1 = 0x1
  6221: 50 20 94 00 cf 0e        ra = 148, jump @642
      :                          @344 [@dyn 74]
  6227: 33 08 5c 00 01           a1 = 0x1005c
  6232: 33 0a 9d 02 01           a3 = 0x1029d
  6237: 33 07 02                 a0 = 0x2
  6240: 33 09 01                 a2 = 0x1
  6243: 33 0b 1d                 a4 = 0x1d
  6246: 0a 64                    ecalli 100 // 'log'
  6248: 95 17 40                 a0 = sp + 0x40
  6251: 33 08 8f 03              a1 = 0x38f
  6255: 33 09 8f 03              a2 = 0x38f
  6259: 0a 0a                    ecalli 10 // 'upgrade'
  6261: 33 08 02                 a1 = 0x2
  6264: 50 20 96 00 a4 0e        ra = 150, jump @642
      :                          @345 [@dyn 75]
  6270: 33 08 77 00 01           a1 = 0x10077
  6275: 33 0a ba 02 01           a3 = 0x102ba
  6280: 33 07 02                 a0 = 0x2
  6283: 33 09 01                 a2 = 0x1
  6286: 33 0b 12                 a4 = 0x12
  6289: 0a 64                    ecalli 100 // 'log'
  6291: 7a 15 80 01              u32 [sp + 0x180] = s0
  6295: 7a 15 84 01              u32 [sp + 0x184] = s0
  6299: 64 65                    s0 = s1
  6301: 82 16 20                 s1 = u64 [sp + 0x20]
  6304: 48 21 88 01              u32 [sp + 392] = 0
  6308: 33 08 01                 a1 = 0x1
  6311: 33 09 01                 a2 = 0x1
  6314: 95 1a 80 01              a3 = sp + 0x180
  6318: 33 0b 01                 a4 = 0x1
  6321: 33 07                    a0 = 0
  6323: 0a 05                    ecalli 5 // 'bless'
  6325: 33 08 05                 a1 = 0x5
  6328: 50 20 98 00 64 0e        ra = 152, jump @642
      :                          @346 [@dyn 76]
  6334: 33 08 91 00 01           a1 = 0x10091
  6339: 33 0a dc 02 01           a3 = 0x102dc
  6344: 33 07 02                 a0 = 0x2
  6347: 33 09 01                 a2 = 0x1
  6350: 33 0b 10                 a4 = 0x10
  6353: 0a 64                    ecalli 100 // 'log'
  6355: 01                       fallthrough
      :                          @347
  6356: 64 67                    a0 = s1
  6358: 64 56                    s1 = s0
  6360: 95 18 80 00              a1 = sp + 0x80
  6364: 0a 04                    ecalli 4 // 'info'
  6366: 33 08 08                 a1 = 0x8
  6369: 50 20 9a 00 3b 0e        ra = 154, jump @642
      :                          @348 [@dyn 77]
  6375: 33 08 5d 03 01           a1 = 0x1035d
  6380: 33 0a 5e 03 01           a3 = 0x1035e
  6385: 33 07 02                 a0 = 0x2
  6388: 33 09 01                 a2 = 0x1
  6391: 33 0b 0f                 a4 = 0xf
  6394: 0a 64                    ecalli 100 // 'log'
  6396: 0a                       ecalli 0 // 'gas'
  6397: 33 08 09                 a1 = 0x9
  6400: 50 20 9c 00 1c 0e        ra = 156, jump @642
      :                          @349 [@dyn 78]
  6406: 33 08 6d 03 01           a1 = 0x1036d
  6411: 33 0a 6e 03 01           a3 = 0x1036e
  6416: 33 07 02                 a0 = 0x2
  6419: 33 09 01                 a2 = 0x1
  6422: 33 0b 13                 a4 = 0x13
  6425: 0a 64                    ecalli 100 // 'log'
  6427: 01                       fallthrough
      :                          @350
  6428: 49 21 80 01              u64 [sp + 384] = 0
  6432: 49 21 88 01              u64 [sp + 392] = 0
  6436: 49 21 90 01              u64 [sp + 400] = 0
  6440: 49 21 98 01              u64 [sp + 408] = 0
  6444: 82 19 30                 a2 = u64 [sp + 0x30]
  6447: 55 19 21 7b              jump @359 if a2 >=u 33
      :                          @351
  6451: 97 65 20                 s0 = s1 << 0x20
  6454: 98 55 20                 s0 = s0 >> 0x20
  6457: 95 17 80 01              a0 = sp + 0x180
  6461: 82 18 08                 a1 = u64 [sp + 0x8]
  6464: 50 20 9e 00 32 11        ra = 158, jump @687
      :                          @352 [@dyn 79]
  6470: 14 08 56 55 55 55 55 55 55 55 a1 = 0x5555555555555556
  6480: 14 07 ab aa aa aa aa aa aa aa a0 = 0xaaaaaaaaaaaaaaab
  6490: ca 75 07                 a0 = s0 * a0
  6493: ae 87 29                 jump @357 if a0 >=u a1
      :                          @353
  6496: 51 16 09 18              jump @355 if s1 == 9
      :                          @354
  6500: 0a 08                    ecalli 8 // 'checkpoint'
  6502: 33 0a 81 03 01           a3 = 0x10381
  6507: 33 07 02                 a0 = 0x2
  6510: 33 0b 11                 a4 = 0x11
  6513: 33 08                    a1 = 0
  6515: 33 09                    a2 = 0
  6517: 0a 64                    ecalli 100 // 'log'
  6519: 01                       fallthrough
      :                          @355
  6520: 95 57 2a                 a0 = s0 + 0x2a
  6523: 33 08 07                 a1 = 0x7
  6526: 50 20 a0 00 9e 0d        ra = 160, jump @642
      :                          @356 [@dyn 80]
  6532: 32 07                    jump [a0]
      :                          @357
  6534: 95 17 80 01              a0 = sp + 0x180
  6538: 33 05 cc 02 01           s0 = 0x102cc
  6543: 0a 10                    ecalli 16 // 'oyield'
  6545: 33 07 02                 a0 = 0x2
  6548: 33 0b 10                 a4 = 0x10
  6551: 33 08                    a1 = 0
  6553: 33 09                    a2 = 0
  6555: 64 5a                    a3 = s0
  6557: 0a 64                    ecalli 100 // 'log'
  6559: 33 08 20                 a1 = 0x20
  6562: 95 1a 80 01              a3 = sp + 0x180
  6566: 28 b4 f7                 jump @296
      :                          @358
  6569: 00                       trap
      :                          @359
  6570: 00                       trap
      :                          @360 [export #2: 'on_transfer']
  6571: 33 07 00 00 01           a0 = 0x10000
  6576: 33 08                    a1 = 0
  6578: 32 00                    ret
      :                          @361
  6580: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  6583: 7b 10 40                 u64 [sp + 0x40] = ra
  6586: 7b 15 38                 u64 [sp + 0x38] = s0
  6589: 7b 16 30                 u64 [sp + 0x30] = s1
  6592: 64 75                    s0 = a0
  6594: 82 77                    a0 = u64 [a0]
  6596: 97 78 01                 a1 = a0 << 0x1
  6599: 33 09 08                 a2 = 0x8
  6602: e4 98 06                 s1 = maxu(a1, a2)
  6605: 57 06 3d                 jump @367 if s1 <s 0
      :                          @362
  6608: 51 07 10                 jump @364 if a0 == 0
      :                          @363
  6611: 82 58 08                 a1 = u64 [s0 + 0x8]
  6614: 7b 18 18                 u64 [sp + 0x18] = a1
  6617: 7b 17 28                 u64 [sp + 0x28] = a0
  6620: 33 07 01                 a0 = 0x1
  6623: 01                       fallthrough
      :                          @364
  6624: 7b 17 20                 u64 [sp + 0x20] = a0
  6627: 64 17                    a0 = sp
  6629: 95 19 18                 a2 = sp + 0x18
  6632: 64 68                    a1 = s1
  6634: 50 20 a2 00 2b           ra = 162, jump @369
      :                          @365 [@dyn 81]
  6639: 82 17                    a0 = u64 [sp]
  6641: 52 07 1e                 jump @368 if a0 != 0
      :                          @366
  6644: 82 17 08                 a0 = u64 [sp + 0x8]
  6647: 7b 56                    u64 [s0] = s1
  6649: 7b 57 08                 u64 [s0 + 0x8] = a0
  6652: 82 10 40                 ra = u64 [sp + 0x40]
  6655: 82 15 38                 s0 = u64 [sp + 0x38]
  6658: 82 16 30                 s1 = u64 [sp + 0x30]
  6661: 95 11 48                 sp = sp + 0x48
  6664: 32 00                    ret
      :                          @367
  6666: 33 07                    a0 = 0
  6668: 28 09 01                 jump @397
      :                          @368
  6671: 82 17 08                 a0 = u64 [sp + 0x8]
  6674: 28 03 01                 jump @397
      :                          @369
  6677: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  6680: 7b 10 30                 u64 [sp + 0x30] = ra
  6683: 7b 15 28                 u64 [sp + 0x28] = s0
  6686: 7b 16 20                 u64 [sp + 0x20] = s1
  6689: 82 9a 08                 a3 = u64 [a2 + 0x8]
  6692: 51 0a 77                 jump @382 if a3 == 0
      :                          @370
  6695: 82 96 10                 s1 = u64 [a2 + 0x10]
  6698: 51 06 98 00              jump @389 if s1 == 0
      :                          @371
  6702: 82 92                    t0 = u64 [a2]
  6704: 33 03 10 00 03           t1 = 0x30010
  6709: 95 39 00 10              a2 = t1 + 0x1000
  6713: 01                       fallthrough
      :                          @372
  6714: 82 9b                    a4 = u64 [a2]
  6716: c8 8b 0a                 a3 = a4 + a1
  6719: ac ba b4 00              jump @395 if a3 <u a4
      :                          @373
  6723: 98 ac 0c                 a5 = a3 >> 0xc
  6726: 52 0c ad 00              jump @395 if a5 != 0
      :                          @374
  6730: 82 9c                    a5 = u64 [a2]
  6732: ab bc ee                 jump @372 if a5 != a4
      :                          @375
  6735: 7b 9a                    u64 [a2] = a3
  6737: 7b 18 18                 u64 [sp + 0x18] = a1
  6740: c9 a3 05                 s0 = t1 - a3
  6743: 95 55 00 10              s0 = s0 + 0x1000
  6747: 7b 17 10                 u64 [sp + 0x10] = a0
  6750: 64 57                    a0 = s0
  6752: 64 28                    a1 = t0
  6754: 64 69                    a2 = s1
  6756: 7b 12 08                 u64 [sp + 0x8] = t0
  6759: 7b 13                    u64 [sp] = t1
  6761: 50 20 a4 00 09 10        ra = 164, jump @687
      :                          @376 [@dyn 82]
  6767: 82 12 08                 t0 = u64 [sp + 0x8]
  6770: 82 17 10                 a0 = u64 [sp + 0x10]
  6773: 82 19                    a2 = u64 [sp]
  6775: 95 98 00 10              a1 = a2 + 0x1000
  6779: 01                       fallthrough
      :                          @377
  6780: 82 89                    a2 = u64 [a1]
  6782: c9 98 0a                 a3 = a1 - a2
  6785: ab 2a 15                 jump @381 if a3 != t0
      :                          @378
  6788: c9 69 0a                 a3 = a2 - s1
  6791: 01                       fallthrough
      :                          @379
  6792: 82 8b                    a4 = u64 [a1]
  6794: ab 9b f2                 jump @377 if a4 != a2
      :                          @380
  6797: 7b 8a                    u64 [a1] = a3
  6799: 33 0c                    a5 = 0
  6801: 82 18 18                 a1 = u64 [sp + 0x18]
  6804: 28 62                    jump @396
      :                          @381
  6806: 82 18 18                 a1 = u64 [sp + 0x18]
  6809: 28 5d                    jump @396
      :                          @382
  6811: 33 09 10 00 03           a2 = 0x30010
  6816: 95 9a 00 10              a3 = a2 + 0x1000
  6820: 01                       fallthrough
      :                          @383
  6821: 82 ac                    a5 = u64 [a3]
  6823: c8 8c 06                 s1 = a5 + a1
  6826: ac c6 49                 jump @395 if s1 <u a5
      :                          @384
  6829: 98 6b 0c                 a4 = s1 >> 0xc
  6832: 52 0b 43                 jump @395 if a4 != 0
      :                          @385
  6835: 82 ab                    a4 = u64 [a3]
  6837: ab cb f0                 jump @383 if a4 != a5
      :                          @386
  6840: 7b a6                    u64 [a3] = s1
  6842: 33 05                    s0 = 0
  6844: 01                       fallthrough
      :                          @387
  6845: ab cb e8                 jump @383 if a4 != a5
      :                          @388
  6848: 28 2a                    jump @394
      :                          @389
  6850: 33 09 10 00 03           a2 = 0x30010
  6855: 95 9a 00 10              a3 = a2 + 0x1000
  6859: 01                       fallthrough
      :                          @390
  6860: 82 ac                    a5 = u64 [a3]
  6862: c8 8c 06                 s1 = a5 + a1
  6865: ac c6 22                 jump @395 if s1 <u a5
      :                          @391
  6868: 98 6b 0c                 a4 = s1 >> 0xc
  6871: 52 0b 1c                 jump @395 if a4 != 0
      :                          @392
  6874: 82 ab                    a4 = u64 [a3]
  6876: ab cb f0                 jump @390 if a4 != a5
      :                          @393
  6879: 7b a6                    u64 [a3] = s1
  6881: c9 69 09                 a2 = a2 - s1
  6884: 95 95 00 10              s0 = a2 + 0x1000
  6888: 28 0e                    jump @396
      :                          @394
  6890: c9 69 09                 a2 = a2 - s1
  6893: 95 95 00 10              s0 = a2 + 0x1000
  6897: 28 05                    jump @396
      :                          @395
  6899: 33 05                    s0 = 0
  6901: 01                       fallthrough
      :                          @396
  6902: 88 59 01                 a2 = s0 <u 0x1
  6905: 33 0a 01                 a3 = 0x1
  6908: db 55 0a                 a3 = s0 if s0 != 0
  6911: 7b 79                    u64 [a0] = a2
  6913: 7b 7a 08                 u64 [a0 + 0x8] = a3
  6916: 7b 78 10                 u64 [a0 + 0x10] = a1
  6919: 82 10 30                 ra = u64 [sp + 0x30]
  6922: 82 15 28                 s0 = u64 [sp + 0x28]
  6925: 82 16 20                 s1 = u64 [sp + 0x20]
  6928: 95 11 38                 sp = sp + 0x38
  6931: 32 00                    ret
      :                          @397
  6933: 52 07 04                 jump @399 if a0 != 0
      :                          @398
  6936: 00                       trap
      :                          @399
  6937: 00                       trap
      :                          @400
  6938: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  6941: 7b 10 40                 u64 [sp + 0x40] = ra
  6944: 7b 15 38                 u64 [sp + 0x38] = s0
  6947: 7b 16 30                 u64 [sp + 0x30] = s1
  6950: c8 89 09                 a2 = a2 + a1
  6953: ac 89 51                 jump @407 if a2 <u a1
      :                          @401
  6956: 64 75                    s0 = a0
  6958: 82 77                    a0 = u64 [a0]
  6960: 33 08 08                 a1 = 0x8
  6963: 97 7a 01                 a3 = a0 << 0x1
  6966: e4 89 08                 a1 = maxu(a2, a1)
  6969: e4 a8 06                 s1 = maxu(a1, a3)
  6972: 57 06 3e                 jump @407 if s1 <s 0
      :                          @402
  6975: 51 07 10                 jump @404 if a0 == 0
      :                          @403
  6978: 82 58 08                 a1 = u64 [s0 + 0x8]
  6981: 7b 18 18                 u64 [sp + 0x18] = a1
  6984: 7b 17 28                 u64 [sp + 0x28] = a0
  6987: 33 07 01                 a0 = 0x1
  6990: 01                       fallthrough
      :                          @404
  6991: 7b 17 20                 u64 [sp + 0x20] = a0
  6994: 64 17                    a0 = sp
  6996: 95 19 18                 a2 = sp + 0x18
  6999: 64 68                    a1 = s1
  7001: 50 20 a6 00 bc fe        ra = 166, jump @369
      :                          @405 [@dyn 83]
  7007: 82 17                    a0 = u64 [sp]
  7009: 52 07 1d                 jump @408 if a0 != 0
      :                          @406
  7012: 82 17 08                 a0 = u64 [sp + 0x8]
  7015: 7b 56                    u64 [s0] = s1
  7017: 7b 57 08                 u64 [s0 + 0x8] = a0
  7020: 82 10 40                 ra = u64 [sp + 0x40]
  7023: 82 15 38                 s0 = u64 [sp + 0x38]
  7026: 82 16 30                 s1 = u64 [sp + 0x30]
  7029: 95 11 48                 sp = sp + 0x48
  7032: 32 00                    ret
      :                          @407
  7034: 33 07                    a0 = 0
  7036: 28 99                    jump @397
      :                          @408
  7038: 82 17 08                 a0 = u64 [sp + 0x8]
  7041: 28 94                    jump @397
      :                          @409
  7043: 95 11 d0                 sp = sp + 0xffffffffffffffd0
  7046: 7b 10 28                 u64 [sp + 0x28] = ra
  7049: 7b 15 20                 u64 [sp + 0x20] = s0
  7052: 7b 16 18                 u64 [sp + 0x18] = s1
  7055: 64 89                    a2 = a1
  7057: 82 88 08                 a1 = u64 [a1 + 0x8]
  7060: 64 76                    s1 = a0
  7062: 51 08 2d                 jump @416 if a1 == 0
      :                          @410
  7065: 33 07                    a0 = 0
  7067: 82 9a                    a3 = u64 [a2]
  7069: 95 ab 08                 a4 = a3 + 0x8
  7072: 64 8c                    a5 = a1
  7074: 01                       fallthrough
      :                          @411
  7075: 82 b5                    s0 = u64 [a4]
  7077: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  7080: c8 57 07                 a0 = a0 + s0
  7083: 95 bb 10                 a4 = a4 + 0x10
  7086: 52 0c f5                 jump @411 if a5 != 0
      :                          @412
  7089: 82 9b 18                 a4 = u64 [a2 + 0x18]
  7092: 51 0b 2a                 jump @419 if a4 == 0
      :                          @413
  7095: 56 17 0f 15              jump @418 if a0 >u 15
      :                          @414
  7099: 82 aa 08                 a3 = u64 [a3 + 0x8]
  7102: 51 0a 58                 jump @427 if a3 == 0
      :                          @415
  7105: 28 0b                    jump @418
      :                          @416
  7107: 82 97 18                 a0 = u64 [a2 + 0x18]
  7110: 51 07 50                 jump @427 if a0 == 0
      :                          @417
  7113: 33 07                    a0 = 0
  7115: 01                       fallthrough
      :                          @418
  7116: 3e 02 00 00 03           u64 [0x30000] = t0
  7121: 8f 72                    t0 = a0 >s 0
  7123: 93 27                    a0 = 0 if t0 == 0
  7125: 3a 02 00 00 03           t0 = u64 [0x30000]
  7130: 97 77 01                 a0 = a0 << 0x1
  7133: 01                       fallthrough
      :                          @419
  7134: 57 07 7c                 jump @432 if a0 <s 0
      :                          @420
  7137: 51 07 3c                 jump @428 if a0 == 0
      :                          @421
  7140: 64 63                    t1 = s1
  7142: 33 0a 08 00 03           a3 = 0x30008
  7147: 33 02 10 00 03           t0 = 0x30010
  7152: 95 2b 00 10              a4 = t0 + 0x1000
  7156: 01                       fallthrough
      :                          @422
  7157: 82 bc                    a5 = u64 [a4]
  7159: c8 7c 06                 s1 = a5 + a0
  7162: ac c6 1b                 jump @426 if s1 <u a5
      :                          @423
  7165: 98 65 0c                 s0 = s1 >> 0xc
  7168: 52 05 15                 jump @426 if s0 != 0
      :                          @424
  7171: 82 b5                    s0 = u64 [a4]
  7173: ab c5 f0                 jump @422 if s0 != a5
      :                          @425
  7176: 7b b6                    u64 [a4] = s1
  7178: c9 62 0a                 a3 = t0 - s1
  7181: 95 aa 00 10              a3 = a3 + 0x1000
  7185: 64 36                    s1 = t1
  7187: 28 0e                    jump @429
      :                          @426
  7189: 00                       trap
      :                          @427
  7190: 33 07                    a0 = 0
  7192: 33 0a 01                 a3 = 0x1
  7195: 28 06                    jump @429
      :                          @428
  7197: 33 0a 01                 a3 = 0x1
  7200: 01                       fallthrough
      :                          @429
  7201: 33 0b 01                 a4 = 0x1
  7204: 7b 17                    u64 [sp] = a0
  7206: 7b 1a 08                 u64 [sp + 0x8] = a3
  7209: 49 11 10                 u64 [sp + 16] = 0
  7212: 33 08 18 05 01           a1 = 0x10518
  7217: 64 17                    a0 = sp
  7219: 50 20 a8 00 79 04        ra = 168, jump @516
      :                          @430 [@dyn 84]
  7225: 52 07 21                 jump @432 if a0 != 0
      :                          @431
  7228: 82 17                    a0 = u64 [sp]
  7230: 82 18 08                 a1 = u64 [sp + 0x8]
  7233: 82 19 10                 a2 = u64 [sp + 0x10]
  7236: 7b 67                    u64 [s1] = a0
  7238: 7b 68 08                 u64 [s1 + 0x8] = a1
  7241: 7b 69 10                 u64 [s1 + 0x10] = a2
  7244: 82 10 28                 ra = u64 [sp + 0x28]
  7247: 82 15 20                 s0 = u64 [sp + 0x20]
  7250: 82 16 18                 s1 = u64 [sp + 0x18]
  7253: 95 11 30                 sp = sp + 0x30
  7256: 32 00                    ret
      :                          @432
  7258: 00                       trap
      :                          @433 [@dyn 85]
  7259: 82 72                    t0 = u64 [a0]
  7261: 33 09 00 f0              a2 = 0xfffffffffffff000
  7265: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  7269: ac 9a 27                 jump @439 if a3 <u a2
      :                          @434
  7272: 82 77 08                 a0 = u64 [a0 + 0x8]
  7275: 33 09 10 00 03           a2 = 0x30010
  7280: 95 99 00 10              a2 = a2 + 0x1000
  7284: 01                       fallthrough
      :                          @435
  7285: 82 9a                    a3 = u64 [a2]
  7287: c9 a9 0b                 a4 = a2 - a3
  7290: ab 7b 12                 jump @439 if a4 != a0
      :                          @436
  7293: c9 2a 0b                 a4 = a3 - t0
  7296: 01                       fallthrough
      :                          @437
  7297: 82 9c                    a5 = u64 [a2]
  7299: ab ac f2                 jump @435 if a5 != a3
      :                          @438
  7302: 7b 9b                    u64 [a2] = a4
  7304: 33 08                    a1 = 0
  7306: 32 00                    ret
      :                          @439
  7308: 32 00                    ret
      :                          @440 [@dyn 86]
  7310: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  7313: 7b 10 18                 u64 [sp + 0x18] = ra
  7316: 7b 15 10                 u64 [sp + 0x10] = s0
  7319: 7b 16 08                 u64 [sp + 0x8] = s1
  7322: 64 95                    s0 = a2
  7324: 64 76                    s1 = a0
  7326: 82 77                    a0 = u64 [a0]
  7328: 82 6a 10                 a3 = u64 [s1 + 0x10]
  7331: c9 a7 07                 a0 = a0 - a3
  7334: ac 97 2b                 jump @443 if a0 <u a2
      :                          @441
  7337: 7b 1a                    u64 [sp] = a3
  7339: 82 67 08                 a0 = u64 [s1 + 0x8]
  7342: c8 a7 07                 a0 = a0 + a3
  7345: 64 59                    a2 = s0
  7347: 50 20 ae 00 bf 0d        ra = 174, jump @687
      :                          @442 [@dyn 87]
  7353: 82 17                    a0 = u64 [sp]
  7355: c8 75 05                 s0 = s0 + a0
  7358: 7b 65 10                 u64 [s1 + 0x10] = s0
  7361: 33 07                    a0 = 0
  7363: 82 10 18                 ra = u64 [sp + 0x18]
  7366: 82 15 10                 s0 = u64 [sp + 0x10]
  7369: 82 16 08                 s1 = u64 [sp + 0x8]
  7372: 95 11 20                 sp = sp + 0x20
  7375: 32 00                    ret
      :                          @443
  7377: 64 67                    a0 = s1
  7379: 7b 18                    u64 [sp] = a1
  7381: 64 a8                    a1 = a3
  7383: 64 59                    a2 = s0
  7385: 50 20 b0 00 41 fe        ra = 176, jump @400
      :                          @444 [@dyn 88]
  7391: 82 18                    a1 = u64 [sp]
  7393: 82 6a 10                 a3 = u64 [s1 + 0x10]
  7396: 28 c5                    jump @441
      :                          @445 [@dyn 89]
  7398: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  7401: 7b 10 20                 u64 [sp + 0x20] = ra
  7404: 7b 15 18                 u64 [sp + 0x18] = s0
  7407: 7b 16 10                 u64 [sp + 0x10] = s1
  7410: 33 09 80 00              a2 = 0x80
  7414: 64 75                    s0 = a0
  7416: ae 98 26                 jump @450 if a1 >=u a2
      :                          @446
  7419: 82 57                    a0 = u64 [s0]
  7421: 82 56 10                 s1 = u64 [s0 + 0x10]
  7424: ab 76 10                 jump @449 if s1 != a0
      :                          @447
  7427: 64 57                    a0 = s0
  7429: 7b 18                    u64 [sp] = a1
  7431: 50 20 b4 00 ad fc        ra = 180, jump @361
      :                          @448 [@dyn 90]
  7437: 82 18                    a1 = u64 [sp]
  7439: 01                       fallthrough
      :                          @449
  7440: 82 57 08                 a0 = u64 [s0 + 0x8]
  7443: c8 67 07                 a0 = a0 + s1
  7446: 95 66 01                 s1 = s1 + 0x1
  7449: 78 78                    u8 [a0] = a1
  7451: 28 99 00                 jump @458
      :                          @450
  7454: 8b 87 0b                 i32 a0 = a1 >> 0xb
  7457: 48 11 0c                 u32 [sp + 12] = 0
  7460: 52 07 15                 jump @452 if a0 != 0
      :                          @451
  7463: 95 17 0d                 a0 = sp + 0xd
  7466: 98 89 06                 a2 = a1 >> 0x6
  7469: 86 99 c0 00              a2 = a2 | 0xc0
  7473: 78 19 0c                 u8 [sp + 0xc] = a2
  7476: 33 09 02                 a2 = 0x2
  7479: 28 52                    jump @455
      :                          @452
  7481: 8b 87 10                 i32 a0 = a1 >> 0x10
  7484: 52 07 22                 jump @454 if a0 != 0
      :                          @453
  7487: 95 17 0e                 a0 = sp + 0xe
  7490: 98 89 0c                 a2 = a1 >> 0xc
  7493: 97 8a 34                 a3 = a1 << 0x34
  7496: 86 99 e0 00              a2 = a2 | 0xe0
  7500: 98 aa 3a                 a3 = a3 >> 0x3a
  7503: 95 aa 80 00              a3 = a3 + 0x80
  7507: 78 19 0c                 u8 [sp + 0xc] = a2
  7510: 78 1a 0d                 u8 [sp + 0xd] = a3
  7513: 33 09 03                 a2 = 0x3
  7516: 28 2d                    jump @455
      :                          @454
  7518: 95 17 0f                 a0 = sp + 0xf
  7521: 98 89 12                 a2 = a1 >> 0x12
  7524: 97 8a 2e                 a3 = a1 << 0x2e
  7527: 97 8b 34                 a4 = a1 << 0x34
  7530: 86 99 f0 00              a2 = a2 | 0xf0
  7534: 98 aa 3a                 a3 = a3 >> 0x3a
  7537: 98 bb 3a                 a4 = a4 >> 0x3a
  7540: 95 aa 80 00              a3 = a3 + 0x80
  7544: 95 bb 80 00              a4 = a4 + 0x80
  7548: 78 19 0c                 u8 [sp + 0xc] = a2
  7551: 78 1a 0d                 u8 [sp + 0xd] = a3
  7554: 78 1b 0e                 u8 [sp + 0xe] = a4
  7557: 33 09 04                 a2 = 0x4
  7560: 01                       fallthrough
      :                          @455
  7561: 82 5a                    a3 = u64 [s0]
  7563: 82 56 10                 s1 = u64 [s0 + 0x10]
  7566: 84 88 3f                 a1 = a1 & 0x3f
  7569: 86 88 80 00              a1 = a1 | 0x80
  7573: c9 6a 0a                 a3 = a3 - s1
  7576: 78 78                    u8 [a0] = a1
  7578: ac 9a 2d                 jump @459 if a3 <u a2
      :                          @456
  7581: 7b 19                    u64 [sp] = a2
  7583: 82 57 08                 a0 = u64 [s0 + 0x8]
  7586: c8 67 07                 a0 = a0 + s1
  7589: 95 18 0c                 a1 = sp + 0xc
  7592: 50 20 b6 00 ca 0c        ra = 182, jump @687
      :                          @457 [@dyn 91]
  7598: 82 17                    a0 = u64 [sp]
  7600: c8 76 06                 s1 = s1 + a0
  7603: 01                       fallthrough
      :                          @458
  7604: 7b 56 10                 u64 [s0 + 0x10] = s1
  7607: 33 07                    a0 = 0
  7609: 82 10 20                 ra = u64 [sp + 0x20]
  7612: 82 15 18                 s0 = u64 [sp + 0x18]
  7615: 82 16 10                 s1 = u64 [sp + 0x10]
  7618: 95 11 28                 sp = sp + 0x28
  7621: 32 00                    ret
      :                          @459
  7623: 64 57                    a0 = s0
  7625: 64 68                    a1 = s1
  7627: 64 96                    s1 = a2
  7629: 50 20 b8 00 4d fd        ra = 184, jump @400
      :                          @460 [@dyn 92]
  7635: 64 69                    a2 = s1
  7637: 82 56 10                 s1 = u64 [s0 + 0x10]
  7640: 28 c5                    jump @456
      :                          @461 [@dyn 93]
  7642: 64 89                    a2 = a1
  7644: 33 08 18 05 01           a1 = 0x10518
  7649: 28 cb 02                 jump @516
      :                          @462
  7652: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  7655: 7b 10 58                 u64 [sp + 0x58] = ra
  7658: 7b 15 50                 u64 [sp + 0x50] = s0
  7661: 7b 16 48                 u64 [sp + 0x48] = s1
  7664: 64 b2                    t0 = a4
  7666: 64 96                    s1 = a2
  7668: 64 8c                    a5 = a1
  7670: 80 73 1c                 t1 = u32 [a0 + 0x1c]
  7673: 33 09 00 00 11           a2 = 0x110000
  7678: 84 34 01                 t2 = t1 & 0x1
  7681: 84 38 04                 a1 = t1 & 0x4
  7684: c8 4b 0b                 a4 = a4 + t2
  7687: 7b 16 28                 u64 [sp + 0x28] = s1
  7690: 52 08 40                 jump @468 if a1 != 0
      :                          @463
  7693: 33 00                    ra = 0
  7695: 7e 78 14                 a1 = u16 [a0 + 0x14]
  7698: 94 49 2b                 a2 = 0x2b if t2 != 0
  7701: 7b 12 20                 u64 [sp + 0x20] = t0
  7704: 7b 1a 18                 u64 [sp + 0x18] = a3
  7707: 52 08 69                 jump @474 if a1 != 0
      :                          @464
  7710: 82 75                    s0 = u64 [a0]
  7712: 82 76 08                 s1 = u64 [a0 + 0x8]
  7715: 64 57                    a0 = s0
  7717: 64 68                    a1 = s1
  7719: 64 0a                    a3 = ra
  7721: 82 1b 28                 a4 = u64 [sp + 0x28]
  7724: 50 20 bc 00 14 02        ra = 188, jump @509
      :                          @465 [@dyn 94]
  7730: 51 07 98 00              jump @481 if a0 == 0
      :                          @466
  7734: 33 05 01                 s0 = 0x1
  7737: 01                       fallthrough
      :                          @467
  7738: 64 57                    a0 = s0
  7740: 82 10 58                 ra = u64 [sp + 0x58]
  7743: 82 15 50                 s0 = u64 [sp + 0x50]
  7746: 82 16 48                 s1 = u64 [sp + 0x48]
  7749: 95 11 60                 sp = sp + 0x60
  7752: 32 00                    ret
      :                          @468
  7754: 51 06 1e                 jump @472 if s1 == 0
      :                          @469
  7757: 33 09                    a2 = 0
  7759: c8 c6 06                 s1 = s1 + a5
  7762: 64 c0                    ra = a5
  7764: 01                       fallthrough
      :                          @470
  7765: 7d c5                    s0 = i8 [a5]
  7767: 95 cc 01                 a5 = a5 + 0x1
  7770: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  7773: 85 58 01                 a1 = s0 ^ 0x1
  7776: c8 89 09                 a2 = a2 + a1
  7779: ab 6c f2                 jump @470 if a5 != s1
      :                          @471
  7782: 28 07                    jump @473
      :                          @472
  7784: 64 c0                    ra = a5
  7786: 33 09                    a2 = 0
  7788: 01                       fallthrough
      :                          @473
  7789: c8 9b 0b                 a4 = a4 + a2
  7792: 33 09 00 00 11           a2 = 0x110000
  7797: 7e 78 14                 a1 = u16 [a0 + 0x14]
  7800: 94 49 2b                 a2 = 0x2b if t2 != 0
  7803: 7b 12 20                 u64 [sp + 0x20] = t0
  7806: 7b 1a 18                 u64 [sp + 0x18] = a3
  7809: 51 08 9d                 jump @464 if a1 == 0
      :                          @474
  7812: 7e 75 16                 s0 = u16 [a0 + 0x16]
  7815: ae 5b 2b                 jump @479 if a4 >=u s0
      :                          @475
  7818: 84 38 08                 a1 = t1 & 0x8
  7821: 52 08 56                 jump @482 if a1 != 0
      :                          @476
  7824: 7b 19 08                 u64 [sp + 0x8] = a2
  7827: 7c 7c 20                 a5 = u8 [a0 + 0x20]
  7830: 95 c9 fd                 a2 = a5 + 0xfffffffffffffffd
  7833: 93 9c 01                 a5 = 0x1 if a2 == 0
  7836: c9 b5 0b                 a4 = s0 - a4
  7839: 7b 10 10                 u64 [sp + 0x10] = ra
  7842: 51 0c a5 00              jump @489 if a5 == 0
      :                          @477
  7846: 52 1c 01 a7 00           jump @490 if a5 != 1
      :                          @478
  7851: 64 b9                    a2 = a4
  7853: 49 01                    u64 [sp + 0] = 0
  7855: 28 b0 00                 jump @491
      :                          @479
  7858: 82 75                    s0 = u64 [a0]
  7860: 82 76 08                 s1 = u64 [a0 + 0x8]
  7863: 64 57                    a0 = s0
  7865: 64 68                    a1 = s1
  7867: 64 0a                    a3 = ra
  7869: 82 1b 28                 a4 = u64 [sp + 0x28]
  7872: 50 20 be 00 80 01        ra = 190, jump @509
      :                          @480 [@dyn 95]
  7878: 52 07 cb 00              jump @495 if a0 != 0
      :                          @481
  7882: 82 6c 18                 a5 = u64 [s1 + 0x18]
  7885: 64 57                    a0 = s0
  7887: 82 18 18                 a1 = u64 [sp + 0x18]
  7890: 82 19 20                 a2 = u64 [sp + 0x20]
  7893: 82 10 58                 ra = u64 [sp + 0x58]
  7896: 82 15 50                 s0 = u64 [sp + 0x50]
  7899: 82 16 48                 s1 = u64 [sp + 0x48]
  7902: 95 11 60                 sp = sp + 0x60
  7905: 32 0c                    jump [a5]
      :                          @482
  7907: 7b 1b 38                 u64 [sp + 0x38] = a4
  7910: 82 7b                    a4 = u64 [a0]
  7912: 82 78 08                 a1 = u64 [a0 + 0x8]
  7915: 81 7a 10                 a3 = i32 [a0 + 0x10]
  7918: 7b 1a 08                 u64 [sp + 0x8] = a3
  7921: 7c 7a 20                 a3 = u8 [a0 + 0x20]
  7924: 7b 1a                    u64 [sp] = a3
  7926: 48 17 10 30              u32 [a0 + 16] = 0x30
  7930: 7b 17 30                 u64 [sp + 0x30] = a0
  7933: 46 17 20 01              u8 [a0 + 32] = 0x1
  7937: 64 b6                    s1 = a4
  7939: 64 b7                    a0 = a4
  7941: 7b 18 40                 u64 [sp + 0x40] = a1
  7944: 64 0a                    a3 = ra
  7946: 82 1b 28                 a4 = u64 [sp + 0x28]
  7949: 50 20 c0 00 33 01        ra = 192, jump @509
      :                          @483 [@dyn 96]
  7955: 52 07 7e                 jump @495 if a0 != 0
      :                          @484
  7958: 64 58                    a1 = s0
  7960: 33 05                    s0 = 0
  7962: 82 17 38                 a0 = u64 [sp + 0x38]
  7965: c9 78 07                 a0 = a1 - a0
  7968: 6e 77                    a0 = zext.h a0
  7970: 7b 17 38                 u64 [sp + 0x38] = a0
  7973: 01                       fallthrough
      :                          @485
  7974: 6e 57                    a0 = zext.h s0
  7976: 82 18 38                 a1 = u64 [sp + 0x38]
  7979: ae 87 cd 00              jump @505 if a0 >=u a1
      :                          @486
  7983: 82 17 40                 a0 = u64 [sp + 0x40]
  7986: 82 79 20                 a2 = u64 [a0 + 0x20]
  7989: 95 55 01                 s0 = s0 + 0x1
  7992: 33 08 30                 a1 = 0x30
  7995: 64 67                    a0 = s1
  7997: b4 90 02 c2 00           ra = 194, jump [a2]
      :                          @487 [@dyn 97]
  8002: 51 07 e4                 jump @485 if a0 == 0
      :                          @488
  8005: 28 4c                    jump @495
      :                          @489
  8007: 7b 1b                    u64 [sp] = a4
  8009: 33 09                    a2 = 0
  8011: 28 14                    jump @491
      :                          @490
  8013: 97 b9 30                 a2 = a4 << 0x30
  8016: 95 b8 01                 a1 = a4 + 0x1
  8019: 98 99 31                 a2 = a2 >> 0x31
  8022: 97 88 30                 a1 = a1 << 0x30
  8025: 98 88 31                 a1 = a1 >> 0x31
  8028: 7b 18                    u64 [sp] = a1
  8030: 01                       fallthrough
      :                          @491
  8031: 33 05                    s0 = 0
  8033: 82 78                    a1 = u64 [a0]
  8035: 7b 18 40                 u64 [sp + 0x40] = a1
  8038: 82 78 08                 a1 = u64 [a0 + 0x8]
  8041: 7b 18 38                 u64 [sp + 0x38] = a1
  8044: 81 77 10                 a0 = i32 [a0 + 0x10]
  8047: 7b 17 30                 u64 [sp + 0x30] = a0
  8050: 6e 96                    s1 = zext.h a2
  8052: 01                       fallthrough
      :                          @492
  8053: 6e 57                    a0 = zext.h s0
  8055: ae 67 2b                 jump @496 if a0 >=u s1
      :                          @493
  8058: 82 17 38                 a0 = u64 [sp + 0x38]
  8061: 82 79 20                 a2 = u64 [a0 + 0x20]
  8064: 95 55 01                 s0 = s0 + 0x1
  8067: 82 17 40                 a0 = u64 [sp + 0x40]
  8070: 82 18 30                 a1 = u64 [sp + 0x30]
  8073: b4 90 02 c4 00           ra = 196, jump [a2]
      :                          @494 [@dyn 98]
  8078: 51 07 e7                 jump @492 if a0 == 0
      :                          @495
  8081: 33 07 01                 a0 = 0x1
  8084: 82 10 58                 ra = u64 [sp + 0x58]
  8087: 82 15 50                 s0 = u64 [sp + 0x50]
  8090: 82 16 48                 s1 = u64 [sp + 0x48]
  8093: 95 11 60                 sp = sp + 0x60
  8096: 32 00                    ret
      :                          @496
  8098: 82 17 40                 a0 = u64 [sp + 0x40]
  8101: 82 16 38                 s1 = u64 [sp + 0x38]
  8104: 64 68                    a1 = s1
  8106: 82 19 08                 a2 = u64 [sp + 0x8]
  8109: 82 1a 10                 a3 = u64 [sp + 0x10]
  8112: 82 1b 28                 a4 = u64 [sp + 0x28]
  8115: 50 20 c6 00 8d 00        ra = 198, jump @509
      :                          @497 [@dyn 99]
  8121: 33 05 01                 s0 = 0x1
  8124: 52 07 7e fe              jump @467 if a0 != 0
      :                          @498
  8128: 82 6a 18                 a3 = u64 [s1 + 0x18]
  8131: 82 17 40                 a0 = u64 [sp + 0x40]
  8134: 82 18 18                 a1 = u64 [sp + 0x18]
  8137: 82 19 20                 a2 = u64 [sp + 0x20]
  8140: b4 a0 02 c8 00           ra = 200, jump [a3]
      :                          @499 [@dyn 100]
  8145: 52 07 69 fe              jump @467 if a0 != 0
      :                          @500
  8149: 33 05                    s0 = 0
  8151: 7e 16                    s1 = u16 [sp ]
  8153: 01                       fallthrough
      :                          @501
  8154: 6e 57                    a0 = zext.h s0
  8156: ae 67 54                 jump @508 if a0 >=u s1
      :                          @502
  8159: 82 17 38                 a0 = u64 [sp + 0x38]
  8162: 82 79 20                 a2 = u64 [a0 + 0x20]
  8165: 95 55 01                 s0 = s0 + 0x1
  8168: 82 17 40                 a0 = u64 [sp + 0x40]
  8171: 82 18 30                 a1 = u64 [sp + 0x30]
  8174: b4 90 02 ca 00           ra = 202, jump [a2]
      :                          @503 [@dyn 101]
  8179: 51 07 e7                 jump @501 if a0 == 0
      :                          @504
  8182: 28 9b                    jump @495
      :                          @505
  8184: 82 17 40                 a0 = u64 [sp + 0x40]
  8187: 82 7a 18                 a3 = u64 [a0 + 0x18]
  8190: 64 67                    a0 = s1
  8192: 82 18 18                 a1 = u64 [sp + 0x18]
  8195: 82 19 20                 a2 = u64 [sp + 0x20]
  8198: b4 a0 02 cc 00           ra = 204, jump [a3]
      :                          @506 [@dyn 102]
  8203: 33 05 01                 s0 = 0x1
  8206: 52 07 2c fe              jump @467 if a0 != 0
      :                          @507
  8210: 82 17 30                 a0 = u64 [sp + 0x30]
  8213: 82 18 08                 a1 = u64 [sp + 0x8]
  8216: 7a 78 10                 u32 [a0 + 0x10] = a1
  8219: 82 18                    a1 = u64 [sp]
  8221: 78 78 20                 u8 [a0 + 0x20] = a1
  8224: 33 07                    a0 = 0
  8226: 82 10 58                 ra = u64 [sp + 0x58]
  8229: 82 15 50                 s0 = u64 [sp + 0x50]
  8232: 82 16 48                 s1 = u64 [sp + 0x48]
  8235: 95 11 60                 sp = sp + 0x60
  8238: 32 00                    ret
      :                          @508
  8240: 33 07                    a0 = 0
  8242: 82 10 58                 ra = u64 [sp + 0x58]
  8245: 82 15 50                 s0 = u64 [sp + 0x50]
  8248: 82 16 48                 s1 = u64 [sp + 0x48]
  8251: 95 11 60                 sp = sp + 0x60
  8254: 32 00                    ret
      :                          @509
  8256: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  8259: 7b 10 20                 u64 [sp + 0x20] = ra
  8262: 7b 15 18                 u64 [sp + 0x18] = s0
  8265: 7b 16 10                 u64 [sp + 0x10] = s1
  8268: 64 86                    s1 = a1
  8270: 33 0c 00 00 11           a5 = 0x110000
  8275: 64 75                    s0 = a0
  8277: aa c9 2d                 jump @513 if a2 == a5
      :                          @510
  8280: 82 6c 20                 a5 = u64 [s1 + 0x20]
  8283: 64 57                    a0 = s0
  8285: 64 98                    a1 = a2
  8287: 7b 1b 08                 u64 [sp + 0x8] = a4
  8290: 7b 1a                    u64 [sp] = a3
  8292: b4 c0 02 ce 00           ra = 206, jump [a5]
      :                          @511 [@dyn 103]
  8297: 82 1a                    a3 = u64 [sp]
  8299: 82 1b 08                 a4 = u64 [sp + 0x8]
  8302: 51 07 14                 jump @513 if a0 == 0
      :                          @512
  8305: 33 07 01                 a0 = 0x1
  8308: 82 10 20                 ra = u64 [sp + 0x20]
  8311: 82 15 18                 s0 = u64 [sp + 0x18]
  8314: 82 16 10                 s1 = u64 [sp + 0x10]
  8317: 95 11 28                 sp = sp + 0x28
  8320: 32 00                    ret
      :                          @513
  8322: 51 0a 1a                 jump @515 if a3 == 0
      :                          @514
  8325: 82 6c 18                 a5 = u64 [s1 + 0x18]
  8328: 64 57                    a0 = s0
  8330: 64 a8                    a1 = a3
  8332: 64 b9                    a2 = a4
  8334: 82 10 20                 ra = u64 [sp + 0x20]
  8337: 82 15 18                 s0 = u64 [sp + 0x18]
  8340: 82 16 10                 s1 = u64 [sp + 0x10]
  8343: 95 11 28                 sp = sp + 0x28
  8346: 32 0c                    jump [a5]
      :                          @515
  8348: 33 07                    a0 = 0
  8350: 82 10 20                 ra = u64 [sp + 0x20]
  8353: 82 15 18                 s0 = u64 [sp + 0x18]
  8356: 82 16 10                 s1 = u64 [sp + 0x10]
  8359: 95 11 28                 sp = sp + 0x28
  8362: 32 00                    ret
      :                          @516
  8364: 95 11 88                 sp = sp + 0xffffffffffffff88
  8367: 7b 10 70                 u64 [sp + 0x70] = ra
  8370: 7b 15 68                 u64 [sp + 0x68] = s0
  8373: 7b 16 60                 u64 [sp + 0x60] = s1
  8376: 82 96 20                 s1 = u64 [a2 + 0x20]
  8379: 7b 17 38                 u64 [sp + 0x38] = a0
  8382: 7b 18 40                 u64 [sp + 0x40] = a1
  8385: 48 11 48 20              u32 [sp + 72] = 0x20
  8389: 47 11 4c                 u16 [sp + 76] = 0
  8392: 47 11 50                 u16 [sp + 80] = 0
  8395: 48 11 54                 u32 [sp + 84] = 0
  8398: 46 11 58 03              u8 [sp + 88] = 0x3
  8402: 51 06 27 01              jump @539 if s1 == 0
      :                          @517
  8406: 82 98 28                 a1 = u64 [a2 + 0x28]
  8409: 51 08 a8 01              jump @549 if a1 == 0
      :                          @518
  8413: 33 0c                    a5 = 0
  8415: 97 8b 03                 a4 = a1 << 0x3
  8418: 97 8a 06                 a3 = a1 << 0x6
  8421: 95 67 38                 a0 = s1 + 0x38
  8424: 82 95                    s0 = u64 [a2]
  8426: 7b 19                    u64 [sp] = a2
  8428: 82 99 10                 a2 = u64 [a2 + 0x10]
  8431: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  8434: c9 ba 0a                 a3 = a3 - a4
  8437: 97 88 03                 a1 = a1 << 0x3
  8440: c8 6a 0a                 a3 = a3 + s1
  8443: 7b 1a 10                 u64 [sp + 0x10] = a3
  8446: 98 88 03                 a1 = a1 >> 0x3
  8449: 95 8a 01                 a3 = a1 + 0x1
  8452: 95 5b 08                 a4 = s0 + 0x8
  8455: 64 95                    s0 = a2
  8457: 7b 1a 18                 u64 [sp + 0x18] = a3
  8460: 7b 19 08                 u64 [sp + 0x8] = a2
  8463: 01                       fallthrough
      :                          @519
  8464: 82 b9                    a2 = u64 [a4]
  8466: 7b 17 28                 u64 [sp + 0x28] = a0
  8469: 7b 1c 30                 u64 [sp + 0x30] = a5
  8472: 51 09 1f                 jump @522 if a2 == 0
      :                          @520
  8475: 82 1a 40                 a3 = u64 [sp + 0x40]
  8478: 82 17 38                 a0 = u64 [sp + 0x38]
  8481: 82 b8 f8                 a1 = u64 [a4 + 0xfffffffffffffff8]
  8484: 82 aa 18                 a3 = u64 [a3 + 0x18]
  8487: 64 b5                    s0 = a4
  8489: b4 a0 02 d0 00           ra = 208, jump [a3]
      :                          @521 [@dyn 104]
  8494: 64 5b                    a4 = s0
  8496: 82 15 08                 s0 = u64 [sp + 0x8]
  8499: 52 07 74 01              jump @552 if a0 != 0
      :                          @522
  8503: 81 68 28                 a1 = i32 [s1 + 0x28]
  8506: 81 69 2c                 a2 = i32 [s1 + 0x2c]
  8509: 7e 67 10                 a0 = u16 [s1 + 0x10]
  8512: 7c 6a 30                 a3 = u8 [s1 + 0x30]
  8515: 7a 19 48                 u32 [sp + 0x48] = a2
  8518: 7a 18 54                 u32 [sp + 0x54] = a1
  8521: 78 1a 58                 u8 [sp + 0x58] = a3
  8524: 51 07 28                 jump @527 if a0 == 0
      :                          @523
  8527: 33 08 01                 a1 = 0x1
  8530: ab 87 11                 jump @525 if a0 != a1
      :                          @524
  8533: 82 67 18                 a0 = u64 [s1 + 0x18]
  8536: 97 77 04                 a0 = a0 << 0x4
  8539: c8 57 07                 a0 = a0 + s0
  8542: 82 78                    a1 = u64 [a0]
  8544: 51 08 19                 jump @528 if a1 == 0
      :                          @525
  8547: 7e 69                    a2 = u16 [s1 ]
  8549: 47 11 4c                 u16 [sp + 76] = 0
  8552: 79 18 4e                 u16 [sp + 0x4e] = a1
  8555: 7b 1b 20                 u64 [sp + 0x20] = a4
  8558: 52 19 02 1f              jump @530 if a2 != 2
      :                          @526
  8562: 28 2d                    jump @532
      :                          @527
  8564: 7e 68 12                 a1 = u16 [s1 + 0x12]
  8567: 28 06                    jump @529
      :                          @528
  8569: 7e 78 08                 a1 = u16 [a0 + 0x8]
  8572: 01                       fallthrough
      :                          @529
  8573: 7e 69                    a2 = u16 [s1 ]
  8575: 47 11 4c 01              u16 [sp + 76] = 0x1
  8579: 79 18 4e                 u16 [sp + 0x4e] = a1
  8582: 7b 1b 20                 u64 [sp + 0x20] = a4
  8585: 51 19 02 16              jump @532 if a2 == 2
      :                          @530
  8589: 52 19 01 16              jump @533 if a2 != 1
      :                          @531
  8593: 82 67 08                 a0 = u64 [s1 + 0x8]
  8596: 97 77 04                 a0 = a0 << 0x4
  8599: c8 57 07                 a0 = a0 + s0
  8602: 82 78                    a1 = u64 [a0]
  8604: 51 08 0f                 jump @534 if a1 == 0
      :                          @532
  8607: 33 08                    a1 = 0
  8609: 28 11                    jump @535
      :                          @533
  8611: 7e 69 02                 a2 = u16 [s1 + 0x2]
  8614: 33 08 01                 a1 = 0x1
  8617: 28 09                    jump @535
      :                          @534
  8619: 7e 79 08                 a2 = u16 [a0 + 0x8]
  8622: 33 08 01                 a1 = 0x1
  8625: 01                       fallthrough
      :                          @535
  8626: 82 67 20                 a0 = u64 [s1 + 0x20]
  8629: 97 77 04                 a0 = a0 << 0x4
  8632: c8 75 0a                 a3 = s0 + a0
  8635: 82 a7                    a0 = u64 [a3]
  8637: 82 aa 08                 a3 = u64 [a3 + 0x8]
  8640: 79 18 50                 u16 [sp + 0x50] = a1
  8643: 79 19 52                 u16 [sp + 0x52] = a2
  8646: 95 18 38                 a1 = sp + 0x38
  8649: b4 a0 02 d2 00           ra = 210, jump [a3]
      :                          @536 [@dyn 105]
  8654: 82 1c 30                 a5 = u64 [sp + 0x30]
  8657: 52 07 d6 00              jump @552 if a0 != 0
      :                          @537
  8661: 95 cc 01                 a5 = a5 + 0x1
  8664: 82 17 10                 a0 = u64 [sp + 0x10]
  8667: 82 16 28                 s1 = u64 [sp + 0x28]
  8670: d3 67 07                 a0 = a0 ^ s1
  8673: 33 08 38                 a1 = 0x38
  8676: 93 78                    a1 = 0 if a0 == 0
  8678: c8 86 07                 a0 = s1 + a1
  8681: 82 1b 20                 a4 = u64 [sp + 0x20]
  8684: 95 bb 10                 a4 = a4 + 0x10
  8687: 82 1a 18                 a3 = u64 [sp + 0x18]
  8690: ab ca 1e ff              jump @519 if a3 != a5
      :                          @538
  8694: 28 81 00                 jump @547
      :                          @539
  8697: 82 97 18                 a0 = u64 [a2 + 0x18]
  8700: 51 07 85 00              jump @549 if a0 == 0
      :                          @540
  8704: 33 0b                    a4 = 0
  8706: 82 96                    s1 = u64 [a2]
  8708: 7b 19                    u64 [sp] = a2
  8710: 82 95 10                 s0 = u64 [a2 + 0x10]
  8713: 97 78 04                 a1 = a0 << 0x4
  8716: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  8719: 97 77 04                 a0 = a0 << 0x4
  8722: 98 77 04                 a0 = a0 >> 0x4
  8725: 95 7a 01                 a3 = a0 + 0x1
  8728: c8 58 08                 a1 = a1 + s0
  8731: 7b 18 20                 u64 [sp + 0x20] = a1
  8734: 95 57 10                 a0 = s0 + 0x10
  8737: 95 66 08                 s1 = s1 + 0x8
  8740: 7b 1a 18                 u64 [sp + 0x18] = a3
  8743: 01                       fallthrough
      :                          @541
  8744: 7b 1b 30                 u64 [sp + 0x30] = a4
  8747: 82 69                    a2 = u64 [s1]
  8749: 7b 17 28                 u64 [sp + 0x28] = a0
  8752: 51 09 17                 jump @544 if a2 == 0
      :                          @542
  8755: 82 1a 40                 a3 = u64 [sp + 0x40]
  8758: 82 17 38                 a0 = u64 [sp + 0x38]
  8761: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  8764: 82 aa 18                 a3 = u64 [a3 + 0x18]
  8767: b4 a0 02 d4 00           ra = 212, jump [a3]
      :                          @543 [@dyn 106]
  8772: 52 07 63                 jump @552 if a0 != 0
      :                          @544
  8775: 82 57                    a0 = u64 [s0]
  8777: 82 59 08                 a2 = u64 [s0 + 0x8]
  8780: 95 18 38                 a1 = sp + 0x38
  8783: b4 90 02 d6 00           ra = 214, jump [a2]
      :                          @545 [@dyn 107]
  8788: 82 1b 30                 a4 = u64 [sp + 0x30]
  8791: 52 07 50                 jump @552 if a0 != 0
      :                          @546
  8794: 95 bb 01                 a4 = a4 + 0x1
  8797: 82 17 20                 a0 = u64 [sp + 0x20]
  8800: 82 15 28                 s0 = u64 [sp + 0x28]
  8803: d3 57 07                 a0 = a0 ^ s0
  8806: 8e 77                    a0 = a0 >u 0
  8808: 97 77 04                 a0 = a0 << 0x4
  8811: c8 57 07                 a0 = a0 + s0
  8814: 95 66 10                 s1 = s1 + 0x10
  8817: 82 1a 18                 a3 = u64 [sp + 0x18]
  8820: ab ba b4                 jump @541 if a3 != a4
      :                          @547
  8823: 82 19                    a2 = u64 [sp]
  8825: 82 97 08                 a0 = u64 [a2 + 0x8]
  8828: ac 7a 0d                 jump @550 if a3 <u a0
      :                          @548
  8831: 28 39                    jump @553
      :                          @549
  8833: 33 0a                    a3 = 0
  8835: 82 97 08                 a0 = u64 [a2 + 0x8]
  8838: 54 07 32                 jump @553 if a0 <=u 0
      :                          @550
  8841: 82 98                    a1 = u64 [a2]
  8843: 97 a9 04                 a2 = a3 << 0x4
  8846: 82 17 38                 a0 = u64 [sp + 0x38]
  8849: 82 1a 40                 a3 = u64 [sp + 0x40]
  8852: c8 89 09                 a2 = a2 + a1
  8855: 82 98                    a1 = u64 [a2]
  8857: 82 99 08                 a2 = u64 [a2 + 0x8]
  8860: 82 aa 18                 a3 = u64 [a3 + 0x18]
  8863: b4 a0 02 d8 00           ra = 216, jump [a3]
      :                          @551 [@dyn 108]
  8868: 51 07 14                 jump @553 if a0 == 0
      :                          @552
  8871: 33 07 01                 a0 = 0x1
  8874: 82 10 70                 ra = u64 [sp + 0x70]
  8877: 82 15 68                 s0 = u64 [sp + 0x68]
  8880: 82 16 60                 s1 = u64 [sp + 0x60]
  8883: 95 11 78                 sp = sp + 0x78
  8886: 32 00                    ret
      :                          @553
  8888: 33 07                    a0 = 0
  8890: 82 10 70                 ra = u64 [sp + 0x70]
  8893: 82 15 68                 s0 = u64 [sp + 0x68]
  8896: 82 16 60                 s1 = u64 [sp + 0x60]
  8899: 95 11 78                 sp = sp + 0x78
  8902: 32 00                    ret
      :                          @554 [@dyn 109]
  8904: 95 11 80                 sp = sp + 0xffffffffffffff80
  8907: 7b 10 78                 u64 [sp + 0x78] = ra
  8910: 7b 15 70                 u64 [sp + 0x70] = s0
  8913: 7b 16 68                 u64 [sp + 0x68] = s1
  8916: 64 93                    t1 = a2
  8918: 33 06                    s1 = 0
  8920: 33 04                    t2 = 0
  8922: 49 11 48                 u64 [sp + 72] = 0
  8925: 33 09 00 10 0a 0a        a2 = 0xa0a1000
  8931: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  8937: 82 7b                    a4 = u64 [a0]
  8939: 7b 1b 38                 u64 [sp + 0x38] = a4
  8942: 82 7b 08                 a4 = u64 [a0 + 0x8]
  8945: 7b 1b 30                 u64 [sp + 0x30] = a4
  8948: 82 77 10                 a0 = u64 [a0 + 0x10]
  8951: 7b 17 40                 u64 [sp + 0x40] = a0
  8954: 7b 18 50                 u64 [sp + 0x50] = a1
  8957: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  8960: 7b 18                    u64 [sp] = a1
  8962: 14 00 0a 0a 0a 0a 0a 0a 0a 0a ra = 0xa0a0a0a0a0a0a0a
  8972: 33 07 a3 03 01           a0 = 0x103a3
  8977: 7b 17 08                 u64 [sp + 0x8] = a0
  8980: 14 07 00 01 01 01 01 01 01 01 a0 = 0x101010101010100
  8990: 7b 17 60                 u64 [sp + 0x60] = a0
  8993: 9a 37                    a0 = -t1
  8995: 7b 17 10                 u64 [sp + 0x10] = a0
  8998: 33 05 0a                 s0 = 0xa
  9001: 7b 13 28                 u64 [sp + 0x28] = t1
  9004: 7b 10 20                 u64 [sp + 0x20] = ra
  9007: 28 3b                    jump @558
      :                          @555
  9009: 82 17                    a0 = u64 [sp]
  9011: c8 67 07                 a0 = a0 + s1
  9014: 7c 77                    a0 = u8 [a0]
  9016: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  9019: 88 77 01                 a0 = a0 <u 0x1
  9022: 01                       fallthrough
      :                          @556
  9023: 78 87                    u8 [a1] = a0
  9025: 82 17 30                 a0 = u64 [sp + 0x30]
  9028: 82 7a 18                 a3 = u64 [a0 + 0x18]
  9031: c9 46 09                 a2 = s1 - t2
  9034: 82 18 50                 a1 = u64 [sp + 0x50]
  9037: c8 48 08                 a1 = a1 + t2
  9040: 82 17 38                 a0 = u64 [sp + 0x38]
  9043: b4 a0 02 dc 00           ra = 220, jump [a3]
      :                          @557 [@dyn 110]
  9048: 64 54                    t2 = s0
  9050: 82 16 58                 s1 = u64 [sp + 0x58]
  9053: 82 10 20                 ra = u64 [sp + 0x20]
  9056: 33 05 0a                 s0 = 0xa
  9059: 82 13 28                 t1 = u64 [sp + 0x28]
  9062: 52 07 6f 01              jump @599 if a0 != 0
      :                          @558
  9066: 82 17 48                 a0 = u64 [sp + 0x48]
  9069: 84 77 01                 a0 = a0 & 0x1
  9072: 52 07 54 01              jump @598 if a0 != 0
      :                          @559
  9076: ae 63 0d                 jump @563 if t1 >=u s1
      :                          @560
  9079: ab 43 0d 01              jump @593 if t1 != t2
      :                          @561
  9083: 28 49 01                 jump @598
      :                          @562
  9086: ac 63 f9                 jump @560 if t1 <u s1
      :                          @563
  9089: c9 63 02                 t0 = t1 - s1
  9092: 82 17 50                 a0 = u64 [sp + 0x50]
  9095: c8 67 07                 a0 = a0 + s1
  9098: 33 08 0f                 a1 = 0xf
  9101: ac 28 23                 jump @569 if a1 <u t0
      :                          @564
  9104: aa 63 ef 00              jump @592 if t1 == s1
      :                          @565
  9108: 33 08                    a1 = 0
  9110: 82 19 10                 a2 = u64 [sp + 0x10]
  9113: c8 69 09                 a2 = a2 + s1
  9116: 64 7a                    a3 = a0
  9118: 01                       fallthrough
      :                          @566
  9119: 7c ab                    a4 = u8 [a3]
  9121: aa 5b 37                 jump @575 if a4 == s0
      :                          @567
  9124: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  9127: 95 aa 01                 a3 = a3 + 0x1
  9130: ab 89 f5                 jump @566 if a2 != a1
      :                          @568
  9133: 28 d2 00                 jump @592
      :                          @569
  9136: 95 7b 07                 a4 = a0 + 0x7
  9139: 84 bb f8                 a4 = a4 & 0xfffffffffffffff8
  9142: c9 7b 08                 a1 = a4 - a0
  9145: 51 08 2d                 jump @578 if a1 == 0
      :                          @570
  9148: 33 0a                    a3 = 0
  9150: 01                       fallthrough
      :                          @571
  9151: c8 a7 09                 a2 = a0 + a3
  9154: 7c 99                    a2 = u8 [a2]
  9156: aa 59 17                 jump @576 if a2 == s0
      :                          @572
  9159: 95 aa 01                 a3 = a3 + 0x1
  9162: ab a8 f5                 jump @571 if a1 != a3
      :                          @573
  9165: 7b 16 58                 u64 [sp + 0x58] = s1
  9168: 95 2a f0                 a3 = t0 + 0xfffffffffffffff0
  9171: ae 8a 1e                 jump @579 if a3 >=u a1
      :                          @574
  9174: 28 55                    jump @582
      :                          @575
  9176: 9a 8a                    a3 = -a1
  9178: 01                       fallthrough
      :                          @576
  9179: c8 a6 08                 a1 = s1 + a3
  9182: 95 86 01                 s1 = a1 + 0x1
  9185: ae 38 9d                 jump @562 if a1 >=u t1
      :                          @577
  9188: 28 7c                    jump @588
      :                          @578
  9190: 7b 16 58                 u64 [sp + 0x58] = s1
  9193: 95 2a f0                 a3 = t0 + 0xfffffffffffffff0
  9196: 95 bb 08                 a4 = a4 + 0x8
  9199: 28 06                    jump @580
      :                          @579
  9201: 95 bb 08                 a4 = a4 + 0x8
  9204: 01                       fallthrough
      :                          @580
  9205: 82 bc f8                 a5 = u64 [a4 + 0xfffffffffffffff8]
  9208: 82 b6                    s1 = u64 [a4]
  9210: 14 09 80 80 80 80 80 80 80 80 a2 = 0x8080808080808080
  9220: d3 0c 05                 s0 = a5 ^ ra
  9223: d3 06 06                 s1 = s1 ^ ra
  9226: 82 13 60                 t1 = u64 [sp + 0x60]
  9229: c9 53 05                 s0 = t1 - s0
  9232: d4 5c 0c                 a5 = a5 | s0
  9235: c9 63 05                 s0 = t1 - s1
  9238: d4 65 05                 s0 = s0 | s1
  9241: d2 5c 0c                 a5 = a5 & s0
  9244: d2 9c 0c                 a5 = a5 & a2
  9247: ab 9c 0c                 jump @582 if a5 != a2
      :                          @581
  9250: 95 88 10                 a1 = a1 + 0x10
  9253: 95 bb 10                 a4 = a4 + 0x10
  9256: ae 8a cd                 jump @580 if a3 >=u a1
      :                          @582
  9259: aa 82 50                 jump @591 if t0 == a1
      :                          @583
  9262: 33 0a                    a3 = 0
  9264: c8 87 09                 a2 = a0 + a1
  9267: 82 13 28                 t1 = u64 [sp + 0x28]
  9270: c9 83 0b                 a4 = t1 - a1
  9273: 82 16 58                 s1 = u64 [sp + 0x58]
  9276: c9 6b 0b                 a4 = a4 - s1
  9279: 33 05 0a                 s0 = 0xa
  9282: 01                       fallthrough
      :                          @584
  9283: c8 a9 0c                 a5 = a2 + a3
  9286: 7c cc                    a5 = u8 [a5]
  9288: aa 5c 0b                 jump @587 if a5 == s0
      :                          @585
  9291: 95 aa 01                 a3 = a3 + 0x1
  9294: ab ab f5                 jump @584 if a4 != a3
      :                          @586
  9297: 28 2e                    jump @592
      :                          @587
  9299: c8 8a 0a                 a3 = a3 + a1
  9302: c8 a6 08                 a1 = s1 + a3
  9305: 95 86 01                 s1 = a1 + 0x1
  9308: ae 38 22 ff              jump @562 if a1 >=u t1
      :                          @588
  9312: c8 a7 07                 a0 = a0 + a3
  9315: 7c 77                    a0 = u8 [a0]
  9317: ab 57 19 ff              jump @562 if a0 != s0
      :                          @589
  9321: 49 11 48                 u64 [sp + 72] = 0
  9324: 64 65                    s0 = s1
  9326: 7b 16 58                 u64 [sp + 0x58] = s1
  9329: 82 18 40                 a1 = u64 [sp + 0x40]
  9332: 7c 87                    a0 = u8 [a1]
  9334: 51 07 45                 jump @596 if a0 == 0
      :                          @590
  9337: 28 1e                    jump @594
      :                          @591
  9339: 82 13 28                 t1 = u64 [sp + 0x28]
  9342: 01                       fallthrough
      :                          @592
  9343: 64 36                    s1 = t1
  9345: aa 43 43                 jump @598 if t1 == t2
      :                          @593
  9348: 7b 16 58                 u64 [sp + 0x58] = s1
  9351: 49 11 48 01              u64 [sp + 72] = 0x1
  9355: 64 45                    s0 = t2
  9357: 64 36                    s1 = t1
  9359: 82 18 40                 a1 = u64 [sp + 0x40]
  9362: 7c 87                    a0 = u8 [a1]
  9364: 51 07 27                 jump @596 if a0 == 0
      :                          @594
  9367: 82 17 30                 a0 = u64 [sp + 0x30]
  9370: 82 7a 18                 a3 = u64 [a0 + 0x18]
  9373: 33 09 04                 a2 = 0x4
  9376: 82 17 38                 a0 = u64 [sp + 0x38]
  9379: 82 18 08                 a1 = u64 [sp + 0x8]
  9382: 7b 15 18                 u64 [sp + 0x18] = s0
  9385: 64 45                    s0 = t2
  9387: b4 a0 02 de 00           ra = 222, jump [a3]
      :                          @595 [@dyn 111]
  9392: 64 54                    t2 = s0
  9394: 82 15 18                 s0 = u64 [sp + 0x18]
  9397: 82 18 40                 a1 = u64 [sp + 0x40]
  9400: 52 07 1d                 jump @599 if a0 != 0
      :                          @596
  9403: ab 46 76 fe              jump @555 if s1 != t2
      :                          @597
  9407: 33 07                    a0 = 0
  9409: 28 7e fe                 jump @556
      :                          @598
  9412: 33 07                    a0 = 0
  9414: 82 10 78                 ra = u64 [sp + 0x78]
  9417: 82 15 70                 s0 = u64 [sp + 0x70]
  9420: 82 16 68                 s1 = u64 [sp + 0x68]
  9423: 95 11 80 00              sp = sp + 0x80
  9427: 32 00                    ret
      :                          @599
  9429: 33 07 01                 a0 = 0x1
  9432: 82 10 78                 ra = u64 [sp + 0x78]
  9435: 82 15 70                 s0 = u64 [sp + 0x70]
  9438: 82 16 68                 s1 = u64 [sp + 0x68]
  9441: 95 11 80 00              sp = sp + 0x80
  9445: 32 00                    ret
      :                          @600 [@dyn 112]
  9447: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  9450: 7b 10 20                 u64 [sp + 0x20] = ra
  9453: 7b 15 18                 u64 [sp + 0x18] = s0
  9456: 7b 16 10                 u64 [sp + 0x10] = s1
  9459: 82 76 10                 s1 = u64 [a0 + 0x10]
  9462: 7c 69                    a2 = u8 [s1]
  9464: 82 7b                    a4 = u64 [a0]
  9466: 82 75 08                 s0 = u64 [a0 + 0x8]
  9469: 51 09 38                 jump @604 if a2 == 0
      :                          @601
  9472: 82 5c 18                 a5 = u64 [s0 + 0x18]
  9475: 33 0a a3 03 01           a3 = 0x103a3
  9480: 33 09 04                 a2 = 0x4
  9483: 64 b7                    a0 = a4
  9485: 7b 18 08                 u64 [sp + 0x8] = a1
  9488: 33 08 a3 03 01           a1 = 0x103a3
  9493: 7b 1b                    u64 [sp] = a4
  9495: b4 c0 02 e2 00           ra = 226, jump [a5]
      :                          @602 [@dyn 113]
  9500: 82 1b                    a4 = u64 [sp]
  9502: 82 18 08                 a1 = u64 [sp + 0x8]
  9505: 51 07 14                 jump @604 if a0 == 0
      :                          @603
  9508: 33 07 01                 a0 = 0x1
  9511: 82 10 20                 ra = u64 [sp + 0x20]
  9514: 82 15 18                 s0 = u64 [sp + 0x18]
  9517: 82 16 10                 s1 = u64 [sp + 0x10]
  9520: 95 11 28                 sp = sp + 0x28
  9523: 32 00                    ret
      :                          @604
  9525: 95 87 f6                 a0 = a1 + 0xfffffffffffffff6
  9528: 88 77 01                 a0 = a0 <u 0x1
  9531: 78 67                    u8 [s1] = a0
  9533: 82 5c 20                 a5 = u64 [s0 + 0x20]
  9536: 64 b7                    a0 = a4
  9538: 82 10 20                 ra = u64 [sp + 0x20]
  9541: 82 15 18                 s0 = u64 [sp + 0x18]
  9544: 82 16 10                 s1 = u64 [sp + 0x10]
  9547: 95 11 28                 sp = sp + 0x28
  9550: 32 0c                    jump [a5]
      :                          @605 [@dyn 114]
  9552: 64 89                    a2 = a1
  9554: 33 08 48 05 01           a1 = 0x10548
  9559: 28 55 fb                 jump @516
      :                          @606
  9562: 95 11 b0                 sp = sp + 0xffffffffffffffb0
  9565: 7b 10 48                 u64 [sp + 0x48] = ra
  9568: 7b 15 40                 u64 [sp + 0x40] = s0
  9571: 7b 16 38                 u64 [sp + 0x38] = s1
  9574: 7b 18 08                 u64 [sp + 0x8] = a1
  9577: 33 04 b1 03 01           t2 = 0x103b1
  9582: 7b 17                    u64 [sp] = a0
  9584: 33 0a 14                 a3 = 0x14
  9587: 53 27 e8 03 fd 00        jump @616 if a0 <u 1000
      :                          @607
  9593: 95 1c 37                 a5 = sp + 0x37
  9596: 49 11 18 10 27           u64 [sp + 24] = 0x2710
  9601: 14 08 4b 59 86 38 d6 c5 6d 34 a1 = 0x346dc5d63886594b
  9611: 7b 18 10                 u64 [sp + 0x10] = a1
  9614: 33 00 7b 14              ra = 0x147b
  9618: 33 03 7f 96 98 00        t1 = 0x98967f
  9624: 64 75                    s0 = a0
  9626: 01                       fallthrough
      :                          @608
  9627: 64 5b                    a4 = s0
  9629: 82 17 10                 a0 = u64 [sp + 0x10]
  9632: d6 75 05                 s0 = s0 mulhu a0
  9635: 98 55 0b                 s0 = s0 >> 0xb
  9638: 82 17 18                 a0 = u64 [sp + 0x18]
  9641: ca 75 02                 t0 = s0 * a0
  9644: bf 2b 07                 i32 a0 = a4 - t0
  9647: 97 79 30                 a2 = a0 << 0x30
  9650: 98 99 32                 a2 = a2 >> 0x32
  9653: ca 09 09                 a2 = a2 * ra
  9656: 98 96 10                 s1 = a2 >> 0x10
  9659: 98 99 11                 a2 = a2 >> 0x11
  9662: 96 99 64                 a2 = a2 * 0x64
  9665: 84 66 fe 07              s1 = s1 & 0x7fe
  9669: bf 97 07                 i32 a0 = a0 - a2
  9672: c8 46 06                 s1 = s1 + t2
  9675: 97 77 31                 a0 = a0 << 0x31
  9678: 98 77 30                 a0 = a0 >> 0x30
  9681: c8 47 07                 a0 = a0 + t2
  9684: 7c 69                    a2 = u8 [s1]
  9686: 7c 66 01                 s1 = u8 [s1 + 0x1]
  9689: 7c 78                    a1 = u8 [a0]
  9691: 7c 77 01                 a0 = u8 [a0 + 0x1]
  9694: 78 c9 fd                 u8 [a5 + 0xfffffffffffffffd] = a2
  9697: 78 c6 fe                 u8 [a5 + 0xfffffffffffffffe] = s1
  9700: 78 c8 ff                 u8 [a5 + 0xffffffffffffffff] = a1
  9703: 78 c7                    u8 [a5] = a0
  9705: 95 aa fc                 a3 = a3 + 0xfffffffffffffffc
  9708: 95 cc fc                 a5 = a5 + 0xfffffffffffffffc
  9711: ac b3 ac                 jump @608 if t1 <u a4
      :                          @609
  9714: 54 15 09 39              jump @611 if s0 <=u 9
      :                          @610
  9718: 97 57 30                 a0 = s0 << 0x30
  9721: 95 1b 24                 a4 = sp + 0x24
  9724: 98 77 32                 a0 = a0 >> 0x32
  9727: c8 ab 0c                 a5 = a4 + a3
  9730: 96 77 7b 14              a0 = a0 * 0x147b
  9734: 98 77 11                 a0 = a0 >> 0x11
  9737: 96 78 64                 a1 = a0 * 0x64
  9740: bf 85 05                 i32 s0 = s0 - a1
  9743: 97 55 31                 s0 = s0 << 0x31
  9746: 98 55 30                 s0 = s0 >> 0x30
  9749: c8 45 05                 s0 = s0 + t2
  9752: 7c 58                    a1 = u8 [s0]
  9754: 7c 59 01                 a2 = u8 [s0 + 0x1]
  9757: 95 aa fe                 a3 = a3 + 0xfffffffffffffffe
  9760: c8 ab 0b                 a4 = a4 + a3
  9763: 78 b8                    u8 [a4] = a1
  9765: 78 c9 ff                 u8 [a5 + 0xffffffffffffffff] = a2
  9768: 64 75                    s0 = a0
  9770: 01                       fallthrough
      :                          @611
  9771: 82 17                    a0 = u64 [sp]
  9773: 51 07 06                 jump @613 if a0 == 0
      :                          @612
  9776: 51 05 1b                 jump @614 if s0 == 0
      :                          @613
  9779: 97 55 01                 s0 = s0 << 0x1
  9782: 84 55 1e                 s0 = s0 & 0x1e
  9785: c8 54 04                 t2 = t2 + s0
  9788: 7c 47 01                 a0 = u8 [t2 + 0x1]
  9791: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  9794: 95 18 24                 a1 = sp + 0x24
  9797: c8 a8 08                 a1 = a1 + a3
  9800: 78 87                    u8 [a1] = a0
  9802: 01                       fallthrough
      :                          @614
  9803: 95 17 24                 a0 = sp + 0x24
  9806: 9a ab 14                 a4 = 0x14 - a3
  9809: c8 7a 0a                 a3 = a3 + a0
  9812: 33 08 01                 a1 = 0x1
  9815: 82 17 08                 a0 = u64 [sp + 0x8]
  9818: 33 09                    a2 = 0
  9820: 50 20 e6 00 88 f7        ra = 230, jump @462
      :                          @615 [@dyn 115]
  9826: 82 10 48                 ra = u64 [sp + 0x48]
  9829: 82 15 40                 s0 = u64 [sp + 0x40]
  9832: 82 16 38                 s1 = u64 [sp + 0x38]
  9835: 95 11 50                 sp = sp + 0x50
  9838: 32 00                    ret
      :                          @616
  9840: 64 75                    s0 = a0
  9842: 56 17 09 84              jump @610 if a0 >u 9
      :                          @617
  9846: 28 b5                    jump @611
      :                          @618
  9848: 51 08 a2 00              jump @640 if a1 == 0
      :                          @619
  9852: 64 79                    a2 = a0
  9854: 7c 77                    a0 = u8 [a0]
  9856: 51 07 97 00              jump @638 if a0 == 0
      :                          @620
  9860: 51 27 ff 00 97 00        jump @641 if a0 == 255
      :                          @621
  9866: 6c 7a                    a3 = sext.b a0
  9868: 57 0a 0b                 jump @623 if a3 <s 0
      :                          @622
  9871: 33 0b                    a4 = 0
  9873: 33 08                    a1 = 0
  9875: 97 77                    a0 = a0 << 0
  9877: 32 00                    ret
      :                          @623
  9879: 55 27 c0 00 0d           jump @625 if a0 >=u 192
      :                          @624
  9884: 33 0c 80                 a5 = 0xffffffffffffff80
  9887: 33 0b 01                 a4 = 0x1
  9890: 28 4d                    jump @634
      :                          @625
  9892: 55 27 e0 00 0e           jump @627 if a0 >=u 224
      :                          @626
  9897: 33 0c 40 ff              a5 = 0xffffffffffffff40
  9901: 33 0b 02                 a4 = 0x2
  9904: 28 3f                    jump @634
      :                          @627
  9906: 55 27 f0 00 0e           jump @629 if a0 >=u 240
      :                          @628
  9911: 33 0c 20 ff              a5 = 0xffffffffffffff20
  9915: 33 0b 03                 a4 = 0x3
  9918: 28 31                    jump @634
      :                          @629
  9920: 55 27 f8 00 0e           jump @631 if a0 >=u 248
      :                          @630
  9925: 33 0c 10 ff              a5 = 0xffffffffffffff10
  9929: 33 0b 04                 a4 = 0x4
  9932: 28 23                    jump @634
      :                          @631
  9934: 55 27 fc 00 0e           jump @633 if a0 >=u 252
      :                          @632
  9939: 33 0c 08 ff              a5 = 0xffffffffffffff08
  9943: 33 0b 05                 a4 = 0x5
  9946: 28 15                    jump @634
      :                          @633
  9948: 88 7a fe 00              a3 = a0 <u 0xfe
  9952: 33 02 02 ff              t0 = 0xffffffffffffff02
  9956: 33 0c 04 ff              a5 = 0xffffffffffffff04
  9960: 85 ab 07                 a4 = a3 ^ 0x7
  9963: da a2 0c                 a5 = t0 if a3 == 0
  9966: 01                       fallthrough
      :                          @634
  9967: 95 ba 01                 a3 = a4 + 0x1
  9970: ac a8 27                 jump @639 if a1 <u a3
      :                          @635
  9973: 33 08                    a1 = 0
  9975: c8 c7 07                 a0 = a0 + a5
  9978: c8 b9 0a                 a3 = a2 + a4
  9981: 01                       fallthrough
      :                          @636
  9982: 7c ac                    a5 = u8 [a3]
  9984: 97 88 08                 a1 = a1 << 0x8
  9987: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  9990: d4 c8 08                 a1 = a1 | a5
  9993: ab 9a f5                 jump @636 if a3 != a2
      :                          @637
  9996: 97 bb 03                 a4 = a4 << 0x3
  9999: cf b7 07                 a0 = a0 << a4
 10002: c8 87 07                 a0 = a0 + a1
 10005: 32 00                    ret
      :                          @638
 10007: 32 00                    ret
      :                          @639
 10009: 00                       trap
      :                          @640
 10010: 00                       trap
      :                          @641
 10011: 00                       trap
      :                          @642
 10012: 95 11 e8 fe              sp = sp + 0xfffffffffffffee8
 10016: 7b 10 10 01              u64 [sp + 0x110] = ra
 10020: 7b 15 08 01              u64 [sp + 0x108] = s0
 10024: 7b 16 00 01              u64 [sp + 0x100] = s1
 10028: 7b 17 10                 u64 [sp + 0x10] = a0
 10031: 78 18 1f                 u8 [sp + 0x1f] = a1
 10034: 7b 17 20                 u64 [sp + 0x20] = a0
 10037: 95 17 1f                 a0 = sp + 0x1f
 10040: 33 08 01                 a1 = 0x1
 10043: 95 19 20                 a2 = sp + 0x20
 10046: 33 0a 08                 a3 = 0x8
 10049: 33 0b ec 00              a4 = 0xec
 10053: 7b 1b 08                 u64 [sp + 0x8] = a4
 10056: 33 0b 02                 a4 = 0x2
 10059: 7b 1b                    u64 [sp] = a4
 10061: 33 06 02                 s1 = 0x2
 10064: 33 05 78 05 01           s0 = 0x10578
 10069: 0a 03                    ecalli 3 // 'write'
 10071: 95 17 90 00              a0 = sp + 0x90
 10075: 95 18 70                 a1 = sp + 0x70
 10078: 95 19 1f                 a2 = sp + 0x1f
 10081: 7b 19 70                 u64 [sp + 0x70] = a2
 10084: 82 19 08                 a2 = u64 [sp + 0x8]
 10087: 7b 19 78                 u64 [sp + 0x78] = a2
 10090: 95 19 10                 a2 = sp + 0x10
 10093: 7b 19 80 00              u64 [sp + 0x80] = a2
 10097: 82 19                    a2 = u64 [sp]
 10099: 7b 19 88 00              u64 [sp + 0x88] = a2
 10103: 46 21 c0 00 03           u8 [sp + 192] = 0x3
 10108: 79 16 c8 00              u16 [sp + 0xc8] = s1
 10112: 79 16 d8 00              u16 [sp + 0xd8] = s1
 10116: 49 21 e8 00 01           u64 [sp + 232] = 0x1
 10121: 7b 17 60                 u64 [sp + 0x60] = a0
 10124: 7b 16 68                 u64 [sp + 0x68] = s1
 10127: 14 09 10 00 00 00 20 00 00 00 a2 = 0x2000000010
 10137: 79 16 90 00              u16 [sp + 0x90] = s1
 10141: 79 16 a0 00              u16 [sp + 0xa0] = s1
 10145: 49 21 b0 00              u64 [sp + 176] = 0
 10149: 7b 19 b8 00              u64 [sp + 0xb8] = a2
 10153: 7b 19 f0 00              u64 [sp + 0xf0] = a2
 10157: 46 21 f8 00 03           u8 [sp + 248] = 0x3
 10162: 7b 15 40                 u64 [sp + 0x40] = s0
 10165: 7b 16 48                 u64 [sp + 0x48] = s1
 10168: 7b 18 50                 u64 [sp + 0x50] = a1
 10171: 7b 16 58                 u64 [sp + 0x58] = s1
 10174: 95 17 28                 a0 = sp + 0x28
 10177: 95 18 40                 a1 = sp + 0x40
 10180: 50 20 e8 00 bf f3        ra = 232, jump @409
      :                          @643 [@dyn 116]
 10186: 33 08                    a1 = 0
 10188: 33 09                    a2 = 0
 10190: 82 15 30                 s0 = u64 [sp + 0x30]
 10193: 82 1b 38                 a4 = u64 [sp + 0x38]
 10196: 82 16 28                 s1 = u64 [sp + 0x28]
 10199: 33 07 02                 a0 = 0x2
 10202: 64 5a                    a3 = s0
 10204: 33 00 ea 00              ra = 0xea
 10208: 0a 64                    ecalli 100 // 'log'
 10210: 01                       fallthrough
      :                          @644 [@dyn 117]
 10211: 33 07 00 f0              a0 = 0xfffffffffffff000
 10215: 95 68 ff ef              a1 = s1 + 0xffffffffffffefff
 10219: ac 78 23                 jump @650 if a1 <u a0
      :                          @645
 10222: 33 07 10 00 03           a0 = 0x30010
 10227: 95 77 00 10              a0 = a0 + 0x1000
 10231: 01                       fallthrough
      :                          @646
 10232: 82 78                    a1 = u64 [a0]
 10234: c9 87 09                 a2 = a0 - a1
 10237: ab 59 11                 jump @650 if a2 != s0
      :                          @647
 10240: c9 68 09                 a2 = a1 - s1
 10243: 01                       fallthrough
      :                          @648
 10244: 82 7a                    a3 = u64 [a0]
 10246: ab 8a f2                 jump @646 if a3 != a1
      :                          @649
 10249: 7b 79                    u64 [a0] = a2
 10251: 33 0b                    a4 = 0
 10253: 01                       fallthrough
      :                          @650
 10254: 82 10 10 01              ra = u64 [sp + 0x110]
 10258: 82 15 08 01              s0 = u64 [sp + 0x108]
 10262: 82 16 00 01              s1 = u64 [sp + 0x100]
 10266: 95 11 18 01              sp = sp + 0x118
 10270: 32 00                    ret
      :                          @651 [@dyn 118]
 10272: 95 11 80                 sp = sp + 0xffffffffffffff80
 10275: 7b 10 78                 u64 [sp + 0x78] = ra
 10278: 7b 15 70                 u64 [sp + 0x70] = s0
 10281: 7b 16 68                 u64 [sp + 0x68] = s1
 10284: 64 85                    s0 = a1
 10286: 82 88 08                 a1 = u64 [a1 + 0x8]
 10289: 82 5a                    a3 = u64 [s0]
 10291: 7b 18 08                 u64 [sp + 0x8] = a1
 10294: 82 86 18                 s1 = u64 [a1 + 0x18]
 10297: 7b 17 18                 u64 [sp + 0x18] = a0
 10300: 33 08 92 03 01           a1 = 0x10392
 10305: 33 09 01                 a2 = 0x1
 10308: 7b 1a 10                 u64 [sp + 0x10] = a3
 10311: 64 a7                    a0 = a3
 10313: b4 60 02 ee 00           ra = 238, jump [s1]
      :                          @652 [@dyn 119]
 10318: 51 07 18                 jump @655 if a0 == 0
      :                          @653
 10321: 33 08 01                 a1 = 0x1
 10324: 01                       fallthrough
      :                          @654
 10325: 64 87                    a0 = a1
 10327: 82 10 78                 ra = u64 [sp + 0x78]
 10330: 82 15 70                 s0 = u64 [sp + 0x70]
 10333: 82 16 68                 s1 = u64 [sp + 0x68]
 10336: 95 11 80 00              sp = sp + 0x80
 10340: 32 00                    ret
      :                          @655
 10342: 7c 57 1c                 a0 = u8 [s0 + 0x1c]
 10345: 84 77 04                 a0 = a0 & 0x4
 10348: 52 07 3b                 jump @661 if a0 != 0
      :                          @656
 10351: 82 17 18                 a0 = u64 [sp + 0x18]
 10354: 64 58                    a1 = s0
 10356: 50 20 f0 00 c9 00        ra = 240, jump @669
      :                          @657 [@dyn 120]
 10362: 33 08 01                 a1 = 0x1
 10365: 52 07 d8                 jump @654 if a0 != 0
      :                          @658
 10368: 82 57 08                 a0 = u64 [s0 + 0x8]
 10371: 82 5a                    a3 = u64 [s0]
 10373: 82 7b 18                 a4 = u64 [a0 + 0x18]
 10376: 01                       fallthrough
      :                          @659
 10377: 33 08 ae 03 01           a1 = 0x103ae
 10382: 33 09 01                 a2 = 0x1
 10385: 64 a7                    a0 = a3
 10387: b4 b0 02 f2 00           ra = 242, jump [a4]
      :                          @660 [@dyn 121]
 10392: 82 10 78                 ra = u64 [sp + 0x78]
 10395: 82 15 70                 s0 = u64 [sp + 0x70]
 10398: 82 16 68                 s1 = u64 [sp + 0x68]
 10401: 95 11 80 00              sp = sp + 0x80
 10405: 32 00                    ret
      :                          @661
 10407: 33 08 ad 03 01           a1 = 0x103ad
 10412: 33 09 01                 a2 = 0x1
 10415: 64 6a                    a3 = s1
 10417: 82 16 10                 s1 = u64 [sp + 0x10]
 10420: 64 67                    a0 = s1
 10422: 7b 1a                    u64 [sp] = a3
 10424: b4 a0 02 f4 00           ra = 244, jump [a3]
      :                          @662 [@dyn 122]
 10429: 33 08 01                 a1 = 0x1
 10432: 52 07 95                 jump @654 if a0 != 0
      :                          @663
 10435: 33 0c 01                 a5 = 0x1
 10438: 95 17 3f                 a0 = sp + 0x3f
 10441: 82 58 10                 a1 = u64 [s0 + 0x10]
 10444: 82 59 18                 a2 = u64 [s0 + 0x18]
 10447: 81 5a 20                 a3 = i32 [s0 + 0x20]
 10450: 95 1b 20                 a4 = sp + 0x20
 10453: 7b 16 20                 u64 [sp + 0x20] = s1
 10456: 82 16 08                 s1 = u64 [sp + 0x8]
 10459: 7b 16 28                 u64 [sp + 0x28] = s1
 10462: 7b 17 30                 u64 [sp + 0x30] = a0
 10465: 33 07 48 05 01           a0 = 0x10548
 10470: 78 1c 3f                 u8 [sp + 0x3f] = a5
 10473: 7b 1b 40                 u64 [sp + 0x40] = a4
 10476: 7b 17 48                 u64 [sp + 0x48] = a0
 10479: 7b 18 50                 u64 [sp + 0x50] = a1
 10482: 7b 19 58                 u64 [sp + 0x58] = a2
 10485: 7a 1a 60                 u32 [sp + 0x60] = a3
 10488: 95 18 40                 a1 = sp + 0x40
 10491: 82 17 18                 a0 = u64 [sp + 0x18]
 10494: 50 20 f6 00 3f           ra = 246, jump @669
      :                          @664 [@dyn 123]
 10499: 51 07 15                 jump @666 if a0 == 0
      :                          @665
 10502: 33 07 01                 a0 = 0x1
 10505: 82 10 78                 ra = u64 [sp + 0x78]
 10508: 82 15 70                 s0 = u64 [sp + 0x70]
 10511: 82 16 68                 s1 = u64 [sp + 0x68]
 10514: 95 11 80 00              sp = sp + 0x80
 10518: 32 00                    ret
      :                          @666
 10520: 82 18 48                 a1 = u64 [sp + 0x48]
 10523: 82 17 40                 a0 = u64 [sp + 0x40]
 10526: 82 8a 18                 a3 = u64 [a1 + 0x18]
 10529: 33 08 ab 03 01           a1 = 0x103ab
 10534: 33 09 02                 a2 = 0x2
 10537: b4 a0 02 f8 00           ra = 248, jump [a3]
      :                          @667 [@dyn 124]
 10542: 82 1a 10                 a3 = u64 [sp + 0x10]
 10545: 82 1b                    a4 = u64 [sp]
 10547: 33 08 01                 a1 = 0x1
 10550: 52 07 1f ff              jump @654 if a0 != 0
      :                          @668
 10554: 28 4f ff                 jump @659
      :                          @669
 10557: 95 11 78 ff              sp = sp + 0xffffffffffffff78
 10561: 7b 10 80 00              u64 [sp + 0x80] = ra
 10565: 64 82                    t0 = a1
 10567: 80 88 1c                 a1 = u32 [a1 + 0x1c]
 10570: 84 89 10                 a2 = a1 & 0x10
 10573: 52 09 40                 jump @674 if a2 != 0
      :                          @670
 10576: 7c 77                    a0 = u8 [a0]
 10578: 84 88 20                 a1 = a1 & 0x20
 10581: 52 08 88 00              jump @678 if a1 != 0
      :                          @671
 10585: 33 08 b1 03 01           a1 = 0x103b1
 10590: 53 17 0a d0 00           jump @682 if a0 <u 10
      :                          @672
 10595: 96 79 29                 a2 = a0 * 0x29
 10598: 98 99 0c                 a2 = a2 >> 0xc
 10601: 96 9a 64                 a3 = a2 * 0x64
 10604: bf a7 0a                 i32 a3 = a0 - a3
 10607: 97 aa 39                 a3 = a3 << 0x39
 10610: 98 aa 38                 a3 = a3 >> 0x38
 10613: c8 8a 0a                 a3 = a3 + a1
 10616: 7c ab                    a4 = u8 [a3]
 10618: 7c aa 01                 a3 = u8 [a3 + 0x1]
 10621: 78 1b 01                 u8 [sp + 0x1] = a4
 10624: 78 1a 02                 u8 [sp + 0x2] = a3
 10627: 33 0a 01                 a3 = 0x1
 10630: 52 07 b0 00              jump @683 if a0 != 0
      :                          @673
 10634: 28 af 00                 jump @684
      :                          @674
 10637: 7c 7a                    a3 = u8 [a0]
 10639: 33 09 7f                 a2 = 0x7f
 10642: 64 13                    t1 = sp
 10644: 01                       fallthrough
      :                          @675
 10645: 64 98                    a1 = a2
 10647: 98 ab 04                 a4 = a3 >> 0x4
 10650: 84 aa 0f                 a3 = a3 & 0xf
 10653: c8 39 09                 a2 = a2 + t1
 10656: 88 ac 0a                 a5 = a3 <u 0xa
 10659: 86 a7 30                 a0 = a3 | 0x30
 10662: 95 aa 57                 a3 = a3 + 0x57
 10665: db c7 0a                 a3 = a0 if a5 != 0
 10668: 78 9a                    u8 [a2] = a3
 10670: 95 89 ff                 a2 = a1 + 0xffffffffffffffff
 10673: 64 ba                    a3 = a4
 10675: 52 0b e2                 jump @675 if a4 != 0
      :                          @676
 10678: 95 88 01                 a1 = a1 + 0x1
 10681: c8 39 09                 a2 = a2 + t1
 10684: 95 9a 01                 a3 = a2 + 0x1
 10687: 9a 8b 81 00              a4 = 0x81 - a1
 10691: 33 08 af 03 01           a1 = 0x103af
 10696: 33 09 02                 a2 = 0x2
 10699: 64 27                    a0 = t0
 10701: 50 20 fa 00 17 f4        ra = 250, jump @462
      :                          @677 [@dyn 125]
 10707: 82 10 80 00              ra = u64 [sp + 0x80]
 10711: 95 11 88 00              sp = sp + 0x88
 10715: 32 00                    ret
      :                          @678
 10717: 33 0a 7f                 a3 = 0x7f
 10720: 64 13                    t1 = sp
 10722: 01                       fallthrough
      :                          @679
 10723: 64 a9                    a2 = a3
 10725: 97 7a 38                 a3 = a0 << 0x38
 10728: 84 77 0f                 a0 = a0 & 0xf
 10731: c8 93 0b                 a4 = t1 + a2
 10734: 98 ac 3c                 a5 = a3 >> 0x3c
 10737: 88 7a 0a                 a3 = a0 <u 0xa
 10740: 86 78 30                 a1 = a0 | 0x30
 10743: 95 77 37                 a0 = a0 + 0x37
 10746: db a8 07                 a0 = a1 if a3 != 0
 10749: 78 b7                    u8 [a4] = a0
 10751: 95 9a ff                 a3 = a2 + 0xffffffffffffffff
 10754: 64 c7                    a0 = a5
 10756: 52 0c df                 jump @679 if a5 != 0
      :                          @680
 10759: 95 99 01                 a2 = a2 + 0x1
 10762: c8 3a 0a                 a3 = a3 + t1
 10765: 95 aa 01                 a3 = a3 + 0x1
 10768: 9a 9b 81 00              a4 = 0x81 - a2
 10772: 33 08 af 03 01           a1 = 0x103af
 10777: 33 09 02                 a2 = 0x2
 10780: 64 27                    a0 = t0
 10782: 50 20 fc 00 c6 f3        ra = 252, jump @462
      :                          @681 [@dyn 126]
 10788: 82 10 80 00              ra = u64 [sp + 0x80]
 10792: 95 11 88 00              sp = sp + 0x88
 10796: 32 00                    ret
      :                          @682
 10798: 33 0a 03                 a3 = 0x3
 10801: 64 79                    a2 = a0
 10803: 51 07 06                 jump @684 if a0 == 0
      :                          @683
 10806: 51 09 1d                 jump @685 if a2 == 0
      :                          @684
 10809: 97 99 01                 a2 = a2 << 0x1
 10812: 95 99 01                 a2 = a2 + 0x1
 10815: 84 97 ff 00              a0 = a2 & 0xff
 10819: c8 87 07                 a0 = a0 + a1
 10822: 7c 77                    a0 = u8 [a0]
 10824: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
 10827: 64 18                    a1 = sp
 10829: c8 a8 08                 a1 = a1 + a3
 10832: 78 87                    u8 [a1] = a0
 10834: 01                       fallthrough
      :                          @685
 10835: 64 17                    a0 = sp
 10837: 9a ab 03                 a4 = 0x3 - a3
 10840: c8 7a 0a                 a3 = a3 + a0
 10843: 33 08 01                 a1 = 0x1
 10846: 64 27                    a0 = t0
 10848: 33 09                    a2 = 0
 10850: 50 20 fe 00 82 f3        ra = 254, jump @462
      :                          @686 [@dyn 127]
 10856: 82 10 80 00              ra = u64 [sp + 0x80]
 10860: 95 11 88 00              sp = sp + 0x88
 10864: 32 00                    ret
      :                          @687
 10866: 95 11 e8                 sp = sp + 0xffffffffffffffe8
 10869: 7b 10 10                 u64 [sp + 0x10] = ra
 10872: 7b 15 08                 u64 [sp + 0x8] = s0
 10875: 7b 16                    u64 [sp] = s1
 10877: 53 19 10 59              jump @697 if a2 <u 16
      :                          @688
 10881: 8d 7a                    i32 a3 = -a0
 10883: 84 a2 07                 t0 = a3 & 0x7
 10886: c8 27 05                 s0 = a0 + t0
 10889: ae 57 1a                 jump @691 if a0 >=u s0
      :                          @689
 10892: 64 2c                    a5 = t0
 10894: 64 7a                    a3 = a0
 10896: 64 8b                    a4 = a1
 10898: 01                       fallthrough
      :                          @690
 10899: 7c b3                    t1 = u8 [a4]
 10901: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
 10904: 78 a3                    u8 [a3] = t1
 10906: 95 aa 01                 a3 = a3 + 0x1
 10909: 95 bb 01                 a4 = a4 + 0x1
 10912: 52 0c f3                 jump @690 if a5 != 0
      :                          @691
 10915: c8 28 08                 a1 = a1 + t0
 10918: c9 29 06                 s1 = a2 - t0
 10921: 84 6c f8                 a5 = s1 & 0xfffffffffffffff8
 10924: 84 8b 07                 a4 = a1 & 0x7
 10927: c8 c5 0a                 a3 = s0 + a5
 10930: 52 0b 49                 jump @700 if a4 != 0
      :                          @692
 10933: ae a5 13                 jump @695 if s0 >=u a3
      :                          @693
 10936: 64 8b                    a4 = a1
 10938: 01                       fallthrough
      :                          @694
 10939: 82 b9                    a2 = u64 [a4]
 10941: 7b 59                    u64 [s0] = a2
 10943: 95 55 08                 s0 = s0 + 0x8
 10946: 95 bb 08                 a4 = a4 + 0x8
 10949: ac a5 f6                 jump @694 if s0 <u a3
      :                          @695
 10952: c8 c8 08                 a1 = a1 + a5
 10955: 84 69 07                 a2 = s1 & 0x7
 10958: c8 9a 0b                 a4 = a3 + a2
 10961: ac ba 0d                 jump @698 if a3 <u a4
      :                          @696
 10964: 28 1a                    jump @699
      :                          @697
 10966: 64 7a                    a3 = a0
 10968: c8 97 0b                 a4 = a0 + a2
 10971: ae b7 13                 jump @699 if a0 >=u a4
      :                          @698
 10974: 7c 8b                    a4 = u8 [a1]
 10976: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
 10979: 78 ab                    u8 [a3] = a4
 10981: 95 aa 01                 a3 = a3 + 0x1
 10984: 95 88 01                 a1 = a1 + 0x1
 10987: 52 09 f3                 jump @698 if a2 != 0
      :                          @699
 10990: 82 10 10                 ra = u64 [sp + 0x10]
 10993: 82 15 08                 s0 = u64 [sp + 0x8]
 10996: 82 16                    s1 = u64 [sp]
 10998: 95 11 18                 sp = sp + 0x18
 11001: 32 00                    ret
      :                          @700
 11003: ae a5 cd                 jump @695 if s0 >=u a3
      :                          @701
 11006: 97 89 03                 a2 = a1 << 0x3
 11009: 84 84 f8                 t2 = a1 & 0xfffffffffffffff8
 11012: 84 92 38                 t0 = a2 & 0x38
 11015: 82 4b                    a4 = u64 [t2]
 11017: 8d 99                    i32 a2 = -a2
 11019: 84 93 38                 t1 = a2 & 0x38
 11022: 95 44 08                 t2 = t2 + 0x8
 11025: 01                       fallthrough
      :                          @702
 11026: 82 49                    a2 = u64 [t2]
 11028: d0 2b 00                 ra = a4 >> t0
 11031: cf 39 0b                 a4 = a2 << t1
 11034: d4 0b 0b                 a4 = a4 | ra
 11037: 7b 5b                    u64 [s0] = a4
 11039: 95 55 08                 s0 = s0 + 0x8
 11042: 95 44 08                 t2 = t2 + 0x8
 11045: 64 9b                    a4 = a2
 11047: ac a5 eb                 jump @702 if s0 <u a3
      :                          @703
 11050: 28 9e                    jump @695
      :                          @704
 11052: 53 19 10 60              jump @714 if a2 <u 16
      :                          @705
 11056: 8d 7a                    i32 a3 = -a0
 11058: 84 a2 07                 t0 = a3 & 0x7
 11061: c8 27 0b                 a4 = a0 + t0
 11064: ae b7 13                 jump @708 if a0 >=u a4
      :                          @706
 11067: 64 2c                    a5 = t0
 11069: 64 7a                    a3 = a0
 11071: 01                       fallthrough
      :                          @707
 11072: 78 a8                    u8 [a3] = a1
 11074: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
 11077: 95 aa 01                 a3 = a3 + 0x1
 11080: 52 0c f8                 jump @707 if a5 != 0
      :                          @708
 11083: c9 29 09                 a2 = a2 - t0
 11086: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
 11089: c8 ba 0a                 a3 = a3 + a4
 11092: ae ab 22                 jump @711 if a4 >=u a3
      :                          @709
 11095: 97 82 38                 t0 = a1 << 0x38
 11098: 14 0c 00 01 01 01 01 00 00 00 a5 = 0x101010100
 11108: d6 c2 02                 t0 = t0 mulhu a5
 11111: 97 2c 20                 a5 = t0 << 0x20
 11114: d4 2c 0c                 a5 = a5 | t0
 11117: 01                       fallthrough
      :                          @710
 11118: 7b bc                    u64 [a4] = a5
 11120: 95 bb 08                 a4 = a4 + 0x8
 11123: ac ab fb                 jump @710 if a4 <u a3
      :                          @711
 11126: 84 99 07                 a2 = a2 & 0x7
 11129: c8 9a 0b                 a4 = a3 + a2
 11132: ae ba 0e                 jump @713 if a3 >=u a4
      :                          @712
 11135: 78 a8                    u8 [a3] = a1
 11137: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
 11140: 95 aa 01                 a3 = a3 + 0x1
 11143: 52 09 f8                 jump @712 if a2 != 0
      :                          @713
 11146: 32 00                    ret
      :                          @714
 11148: 64 7a                    a3 = a0
 11150: c8 97 0b                 a4 = a0 + a2
 11153: ac b7 ee                 jump @712 if a0 <u a4
      :                          @715
 11156: 28 f6                    jump @713
